from PyQt4 import *

try:
	import DB2
	import db2GUI
except ImportError:
	print "Could not import DB2. This module will not work!"


#  The following class handles all the interactions for the window
#  we've created and defined in db2GUI.py  It serves as a transparent 
#  wrapper to make everything easier to maintain.  

class db2UI(QtGui.QDialog):
	def __init__(self):
		#  construct the QDialog
		QtGui.QDialog.__init__(self)

		#  Build our custom UI on top of the QDialog
		self.ui = db2GUI.Ui_DB2InteractionDialog()
		#  Call setupUi to actually do the building
		self.ui.setupUi(self)

		#  self.query is the query formed by calling formQuery()
		self.query = ""
		#  The results of the query.  This is cleared whenever
		#  runQuery is called or whenever clearResults is called
		self.results = []
		self.selections = {}
		self.localPath = "./"

		self.connect(self.ui.buttonBasicResetQuery, QtCore.SIGNAL("clicked()"), self.basicResetQuery)
		self.connect(self.ui.buttonClear, QtCore.SIGNAL("clicked()"), self.addClear)
		self.connect(self.ui.buttonAddFrom, QtCore.SIGNAL("clicked()"), self.addAddFilesFrom)
		self.connect(self.ui.buttonRunQuery, QtCore.SIGNAL("clicked()"), self.advancedRunQuery)
		self.connect(self.ui.buttonQueryReset, QtCore.SIGNAL("clicked()"), self.advancedResetQuery)
		self.connect(self.ui.buttonBasicRunQuery, QtCore.SIGNAL("clicked()"), self.basicRunQuery)
		self.connect(self.ui.buttonLogin, QtCore.SIGNAL("clicked()"), self.connectDB)
		self.connect(self.ui.resultsBTable, QtCore.SIGNAL("cellClicked(int,int)"), self.bSelectionMade)
		self.connect(self.ui.buttonBasicResetResults, QtCore.SIGNAL("clicked()"), self.basicResetResults)
		self.connect(self.ui.buttonBasicFetch, QtCore.SIGNAL("clicked()"), self.retrieveFiles)
		self.connect(self.ui.buttonFetchFiles, QtCore.SIGNAL("clicked()"), self.retrieveFiles)

	def connectDB(self):
		# A connection requires a Hostname, a Port, a DB name,
		# a username, and a password
		# Fetch them from the gui.
		dsn = self.ui.editHostname.text().toAscii().data()
		user = self.ui.editUsername.text().toAscii().data()
		pw = self.ui.editPassword.text().toAscii().data()
		#  The connection is made a global variable
		#  to allow it to persist across various sessions in
		#  the UI.
		global conn 
		conn = DB2.connect(dsn, user, pw)
		#  Since one connection can support multiple cursors, we 
		#  can maintain a single cursor in our dialog class.
		self.ui.labelConnectionStatus.setText("Connected")

	def disconnectDB(self):
		#  Close the cursor and then the connection to properly
		#  disconnect from the DB.
		self.curs.close()
		conn.close()
		self.ui.labelConnectionStatus.setText("Disconnected")

	def basicRunQuery(self):
		#  Form a query from the selections made in the UI
		self.formQuery()
		#  Execute the query
		self.curs = conn.cursor()
		self.curs.execute(self.query)
		#  Clear the results of any previous queries
		self.results = []
		while True:
			#  Grab results one at a time and add
			#  them to the results list
			res = self.curs.fetchone()
			print res
			if res is None:
				break
			self.results.append(res)
		#  Update the results box with our new results
		#  list.
		self.updateResultsBox(self.ui.resultsBTable)
		self.curs.close()
			
	def basicResetQuery(self):
		# Reset the actual query
		self.query = ""
		# Uncheck all the boxes in the GUI and clear the associated
		# texteditors
		self.ui.edit_BDemoAge.clear()
		self.ui.edit_BDemoSex.clear()
		self.ui.edit_BDemoEthnicity.clear()
		self.ui.edit_BDemoBday.clear()
		self.ui.edit_BDemoTag.clear()
		self.ui.edit_BDemoDate.clear()
		self.ui.checkBox_BRawEEG.setChecked(False)
		self.ui.checkBox_BRawMEG.setChecked(False)
		self.ui.checkBox_BRawMRI.setChecked(False)
		self.ui.checkBox_BRawGenetic.setChecked(False)
		self.ui.edit_BRawDate.clear()
		self.ui.checkBox_BDerivPSD.setChecked(False)
		self.ui.checkBox_BDerivPCA.setChecked(False)
		self.ui.checkBox_BDerivICA.setChecked(False)
		self.ui.edit_BDerivDate.clear()
		self.ui.editPID.clear()

	def basicResetResults(self):
		#  all we have to do is clear the results list and
		#  re-update
		self.results = []
		self.updateResultsBox(self.ui.resultsBTable)

	def addClear(self):
		#  Clear the query generated by the add
		self.query = ""
		self.ui.checkBox_AssocNew.setChecked(False)
		self.ui.radio_AssocRawEEG.setChecked(False)
		self.ui.radio_AssocRawMEG.setChecked(False)
		self.ui.radio_AssocRawMRI.setChecked(False)
		self.ui.radio_AssocEEGPSD.setChecked(False)
		self.ui.radio_AssocEEGPCA.setChecked(False)
		self.ui.radio_AssocEEGICA.setChecked(False)
		self.ui.radio_AssocMEGPSD.setChecked(False)
		self.ui.radio_AssocMEGPCA.setChecked(False)
		self.ui.radio_AssocMEGICA.setChecked(False)
		self.ui.radio_AssocSegMRI.setChecked(False)
		self.ui.radio_AssocRawGenetic.setChecked(False)
		self.ui.radio_AssocProcGenetic.setChecked(False)
		self.ui.radio_AssocOther.setChecked(False)
		self.ui.edit_AssocOther.clear()

		self.ui.checkBox_DemoPID.setChecked(False)
		self.ui.edit_DemoPID.clear()
		self.ui.checkBox_DemoAge.setChecked(False)
		self.ui.edit_DemoAge.clear()
		self.ui.checkBox_DemoSex.setChecked(False)
		self.ui.edit_DemoSex.clear()
		self.ui.checkBox_DemoEthnicity.setChecked(False)
		self.ui.edit_DemoEthnicity.clear()
		self.ui.checkBox_Bday.setChecked(False)
		self.ui.edit_DemoBday.clear()
		self.ui.checkBox_DemoTag.setChecked(False)
		self.ui.edit_DemoTag.clear()
		self.ui.checkBox_DemoDate.setChecked(False)
		self.ui.edit_DemoDate.clear()

	def addAddFiles(self):
		#  To add a file to the DB we form the query we want
		#  from the selections made in the GUI and then 
		#  execute the query like anything else.  No rows are returned
		self.curs = conn.cursor()
		self.formAddQuery()
		self.curs.execute(self.query)
		self.curs.close()

	def addAddFilesFrom(self):
		#  Bring up a modal box to choose the file to upload.
		self.filename = QtGui.QFileDialog.getOpenFileName(self,
								  "Upload File to DB2...",
								  "",
								  "All Files (*.*)")
		self.ui.editAddFrom.clear()
		self.ui.editAddFrom.insert(self.filename)

	def advancedRunQuery(self):
		print "Query is "
		#  Form the query from the text editor in the UI
		self.query = ""
		self.curs = conn.cursor()
		self.query = self.ui.textEditQuery.toPlainText().toAscii().data()
		#  Execute the query
		self.curs.execute(self.query)
		#  Clear the results of any previous queries
		print self.query
		self.results = []
		while True:
			#  Grab results one at a time and add
			#  them to the results list
			res = self.curs.fetchone()
			if res is None:
				break
			self.results.append(res)
		#  Update the results box with our new results
		#  list.
		self.updateResultsBox(self.ui.listResults)
		self.curs.close()

	def advancedResetQuery(self):
		#  Just reset the text editor
		self.ui.textEditQuery.clear()
		self.query = ""

	def advancedResetResults(self):
		#  all we have to do is clear the results list and
		#  re-update
		self.results = []
		self.updateResultsBox()
		
	def formQuery(self):
		#  Form a valid SQL query from the selections made 
		#  in the GUI.  First we clear the query string so 
		#  we can ensure that it is well-formed.
		self.query = "SELECT * FROM Participants"
		
		#  Now we have to determine which tables we want to perform the query on
		if self.ui.checkBox_BRawEEG.isChecked():
			self.query += ", Raw_EEG"
		if self.ui.checkBox_BRawMEG.isChecked():
			self.query += ", Raw_MEG"
		if self.ui.checkBox_BRawMRI.isChecked():
			self.query += ", Raw_MRI"
		if self.ui.checkBox_BDerivPSD.isChecked():
			self.query += ", Deriv_SPD"
		if self.ui.checkBox_BDerivPCA.isChecked():
			self.query += ", Deriv_PCA"
		if self.ui.checkBox_BDerivICA.isChecked():
			self.query += ", Deriv_ICA"

		#  Now determine the WHERE clause
		whereClause = ""
		whereItems = 0
		if len(self.ui.editPID.text().toAscii().data()) > 0:
			if whereItems > 0:
				whereClause += " AND "
			whereClause += "PID = \"" + self.ui.editPID.text().toAscii().data() + "\""
			whereItems += 1
		if len(self.ui.edit_BDemoAge.text().toAscii().data()) > 0:
			if whereItems > 0:
				whereClause += " AND "
			whereClause += "Age = " + self.ui.edit_BDemoAge.text().toAscii().data()
			whereItems += 1
		if len(self.ui.edit_BDemoSex.text().toAscii().data()) > 0:
			if whereItems > 0:
				whereClause += " AND "
			whereClause += "Sex = " + self.ui.edit_BDemoSex.text().toAscii().data()
			whereItems += 1
		if len(self.ui.edit_BDemoEthnicity.text().toAscii().data()) > 0:
			if whereItems > 0:
				whereClause += " AND "
			whereClause += "Ethnicity = \"" + self.ui.edit_BDemoEthnicity.text().toAscii().data() + "\""
			whereItems += 1
		if len(self.ui.edit_BDemoBday.text().toAscii().data()) > 0:
			if whereItems > 0:
				whereClause += " AND "
			whereClause += "Bday = \"" + self.ui.edit_BDemoBday.text().toAscii().data() + "\""
			whereItems += 1
		if len(self.ui.edit_BDemoTag.text().toAscii().data()) > 0:
			if whereItems > 0:
				whereClause += " AND "
			whereClause += "Tag = \"" + self.ui.edit_BDemoTag.text().toAscii().data() + "\""
			whereItems += 1
		if len(self.ui.edit_BDemoDate.text().toAscii().data()) > 0:
			if whereItems > 0:
				whereClause += " AND "
			whereClause += "SessionDate = \"" + self.ui.edit_BDemoDate.text().toAscii().data() + "\""
			whereItems += 1

		#  If the where clause is empty, we just return all rows.
		if whereItems > 0:
			self.query += " WHERE "
			self.query += whereClause

		print "Query = " + self.query

	def formAddQuery(self):
		#  Form a valid SQL query from the selections made 
		#  in the add Files GUI.  First we clear the query string so 
		#  we can ensure that it is well-formed.
		self.query = ""

	def updateResultsBox(self, lbox):
		#  First we clear the listbox we're updating
		lbox.clear()
		lbox.setHorizontalHeaderLabels(["ID", "Age", "Sex", "Ethnicity", "Birthday", "Tag", "Date"])
		lbox.setRowCount(len(self.results))
		#  Go through our results list and add the items
		row = 0
		for item in self.results:
			col = 0
			str = ""
			for element in item:
				str = element.__str__()
				lbox.setItem(row, col, QtGui.QTableWidgetItem(str))
				col += 1
			row += 1

	#  Make a selection apply to an entire row!
	def toggleRow(self, lbox, row, state):
		lbox.setItemSelected(lbox.item(row, 0), state)
		lbox.setItemSelected(lbox.item(row, 1), state)
		lbox.setItemSelected(lbox.item(row, 2), state)
		lbox.setItemSelected(lbox.item(row, 3), state)
		lbox.setItemSelected(lbox.item(row, 4), state)
		lbox.setItemSelected(lbox.item(row, 5), state)
		lbox.setItemSelected(lbox.item(row, 6), state)
		pid = lbox.item(row,0).text().toAscii().data()
		if state == True:
			self.selections[pid] = 1
		else:
			self.selections.pop(pid)

	#  Handle the selection of items n the table view.
	def bSelectionMade(self, row, col):
		status = self.ui.resultsBTable.isItemSelected(self.ui.resultsBTable.item(row, col))
		self.toggleRow(self.ui.resultsBTable, row, status)

	def retrieveFiles(self):
		for pid in self.selections.keys():
			print "putting files for " + pid + " from the database into " + self.localPath

