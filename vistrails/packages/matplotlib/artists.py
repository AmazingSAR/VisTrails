from core.modules.vistrails_module import Module, ModuleError

class ArtistException(Exception):
    def __init__(self, msg):
        Exception.__init__(self)
        self.msg = msg

    def __str__(self):
        return self.msg

def translate_color(c):
    return c.tuple

class MplArtistProperties(Module):
    _input_ports = [
("agg_filter", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "set agg_filter fuction."}),
("alpha", "(edu.utah.sci.vistrails.basic:Float)",
 {"optional": True,
 "docstring": "Set the alpha value used for blending - not supported on\nall backends.\nACCEPTS: float (0.0 transparent through 1.0 opaque)"}),
("animated", "(edu.utah.sci.vistrails.basic:Boolean)",
 {"optional": True,
 "docstring": "Set the artist's animation state.\nACCEPTS: [True | False]"}),
("axes", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Set the :class:`~matplotlib.axes.Axes` instance in which the\nartist resides, if any.\nACCEPTS: an :class:`~matplotlib.axes.Axes` instance"}),
("clip_box", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Set the artist's clip :class:`~matplotlib.transforms.Bbox`.\nACCEPTS: a :class:`matplotlib.transforms.Bbox` instance"}),
("clip_on", "(edu.utah.sci.vistrails.basic:Boolean)",
 {"optional": True,
 "docstring": "Set whether artist uses clipping.\nACCEPTS: [True | False]"}),
("clip_path", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Set the artist's clip path, which may be:\n* a :class:`~matplotlib.patches.Patch` (or subclass) instance\n* a :class:`~matplotlib.path.Path` instance, in which case\nan optional :class:`~matplotlib.transforms.Transform`\ninstance may be provided, which will be applied to the\npath before using it for clipping.\n* *None*, to remove the clipping path\nFor efficiency, if the path happens to be an axis-aligned\nrectangle, this method will set the clipping box to the\ncorresponding rectangle and set the clipping path to *None*.\nACCEPTS: [ (:class:`~matplotlib.path.Path`,\n:class:`~matplotlib.transforms.Transform`) |\n:class:`~matplotlib.patches.Patch` | None ]",
 "entry_types": ["enum"],
 "values": [['(:class:`~matplotlib.path.Path`, :class:`~matplotlib.transforms.Transform`)', ':class:`~matplotlib.patches.Patch`', 'None']]}),
("contains", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Replace the contains test used by this artist. The new picker\nshould be a callable function which determines whether the\nartist is hit by the mouse event::\nhit, props = picker(artist, mouseevent)\nIf the mouse event is over the artist, return *hit* = *True*\nand *props* is a dictionary of properties you want returned\nwith the contains test.\nACCEPTS: a callable function"}),
("figure", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Set the :class:`~matplotlib.figure.Figure` instance the artist\nbelongs to.\nACCEPTS: a :class:`matplotlib.figure.Figure` instance"}),
("gid", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Sets the (group) id for the artist\nACCEPTS: an id string"}),
("label", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Set the label to *s* for auto legend.\nACCEPTS: any string"}),
("lod", "(edu.utah.sci.vistrails.basic:Boolean)",
 {"optional": True,
 "docstring": "Set Level of Detail on or off.  If on, the artists may examine\nthings like the pixel width of the axes and draw a subset of\ntheir contents accordingly\nACCEPTS: [True | False]"}),
("picker", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Set the epsilon for picking used by this artist\n*picker* can be one of the following:\n* *None*: picking is disabled for this artist (default)\n* A boolean: if *True* then picking will be enabled and the\nartist will fire a pick event if the mouse event is over\nthe artist\n* A float: if picker is a number it is interpreted as an\nepsilon tolerance in points and the artist will fire\noff an event if it's data is within epsilon of the mouse\nevent.  For some artists like lines and patch collections,\nthe artist may provide additional data to the pick event\nthat is generated, e.g. the indices of the data within\nepsilon of the pick event\n* A function: if picker is callable, it is a user supplied\nfunction which determines whether the artist is hit by the\nmouse event::\nhit, props = picker(artist, mouseevent)\nto determine the hit test.  if the mouse event is over the\nartist, return *hit=True* and props is a dictionary of\nproperties you want added to the PickEvent attributes.\nACCEPTS: [None|float|boolean|callable]",
 "entry_types": ["enum"],
 "values": [['None', 'float', 'boolean', 'callable']]}),
("rasterized", "(edu.utah.sci.vistrails.basic:Boolean)",
 {"optional": True,
 "docstring": "Force rasterized (bitmap) drawing in vector backend output.\nDefaults to None, which implies the backend's default behavior\nACCEPTS: [True | False | None]"}),
("snap", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Sets the snap setting which may be:\n* True: snap vertices to the nearest pixel center\n* False: leave vertices as-is\n* None: (auto) If the path contains only rectilinear line\nsegments, round to the nearest pixel center\nOnly supported by the Agg and MacOSX backends."}),
("transform", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Set the :class:`~matplotlib.transforms.Transform` instance\nused by this artist.\nACCEPTS: :class:`~matplotlib.transforms.Transform` instance"}),
("url", "(edu.utah.sci.vistrails.basic:String)",
 {"optional": True,
 "docstring": "Sets the url for the artist\nACCEPTS: a url string"}),
("visible", "(edu.utah.sci.vistrails.basic:Boolean)",
 {"optional": True,
 "docstring": "Set the artist's visiblity.\nACCEPTS: [True | False]"}),
("zorder", "(edu.utah.sci.vistrails.basic:Float)",
 {"optional": True,
 "docstring": "Set the zorder for the artist.  Artists with lower zorder\nvalues are drawn first.\nACCEPTS: any number"}),
    ]
    _output_ports = [('self', "(MplArtistProperties)")]

# class MplArtist(object):
#     _input_ports = [# ("agg_filter", "(edu.utah.sci.vistrails.basic:String)", True
#                     #  {"docstring": "set agg_filter fuction."}),
#                     ("alpha", "(edu.utah.sci.vistrails.basic:Float)", True,
#                      {"docstring": "Set the alpha value used for blending - not supported on\nall backends.\nACCEPTS: float (0.0 transparent through 1.0 opaque)"}),
#                     ("animated", "(edu.utah.sci.vistrails.basic:Boolean)", True,
#                      {"docstring": "Set the artist's animation state.\nACCEPTS: [True | False]"}),
#                     # ("axes", "(edu.utah.sci.vistrails.basic:String)", True,
#                     #  {"docstring": "Set the :class:`~matplotlib.axes.Axes` instance in which the\nartist resides, if any.\nACCEPTS: an :class:`~matplotlib.axes.Axes` instance"}),
#                     ("clip_box", "(edu.utah.sci.vistrails.basic:String)", True,
#                      {"docstring": "Set the artist's clip :class:`~matplotlib.transforms.Bbox`.\nACCEPTS: a :class:`matplotlib.transforms.Bbox` instance"}),
#                     ("clip_on", "(edu.utah.sci.vistrails.basic:Boolean)", True,
#                      {"docstring": "Set whether artist uses clipping.\nACCEPTS: [True | False]"}),
#                     ("clip_path", "(edu.utah.sci.vistrails.basic:String)", True,
#                      {"docstring": "Set the artist's clip path, which may be:\n* a :class:`~matplotlib.patches.Patch` (or subclass) instance\n* a :class:`~matplotlib.path.Path` instance, in which case\nan optional :class:`~matplotlib.transforms.Transform`\ninstance may be provided, which will be applied to the\npath before using it for clipping.\n* *None*, to remove the clipping path\nFor efficiency, if the path happens to be an axis-aligned\nrectangle, this method will set the clipping box to the\ncorresponding rectangle and set the clipping path to *None*.\nACCEPTS: [ (:class:`~matplotlib.path.Path`,\n:class:`~matplotlib.transforms.Transform`) |\n:class:`~matplotlib.patches.Patch` | None ]"}),
#                     # ("contains", "(edu.utah.sci.vistrails.basic:String)", True,
#                     #  {"docstring": "Replace the contains test used by this artist. The new picker\nshould be a callable function which determines whether the\nartist is hit by the mouse event::\nhit, props = picker(artist, mouseevent)\nIf the mouse event is over the artist, return *hit* = *True*\nand *props* is a dictionary of properties you want returned\nwith the contains test.\nACCEPTS: a callable function"}),
#                     # ("figure", "(edu.utah.sci.vistrails.basic:String)", True,
#                     #  {"docstring": "Set the :class:`~matplotlib.figure.Figure` instance the artist\nbelongs to.\nACCEPTS: a :class:`matplotlib.figure.Figure` instance"}),
#                     ("gid", "(edu.utah.sci.vistrails.basic:String)", True,
#                      {"docstring": "Sets the (group) id for the artist\nACCEPTS: an id string"}),
#                     ("label", "(edu.utah.sci.vistrails.basic:String)", True,
#                      {"docstring": "Set the label to *s* for auto legend.\nACCEPTS: any string"}),
#                     ("lod", "(edu.utah.sci.vistrails.basic:Boolean)", True,
#                      {"docstring": "Set Level of Detail on or off.  If on, the artists may examine\nthings like the pixel width of the axes and draw a subset of\ntheir contents accordingly\nACCEPTS: [True | False]"}),
#                     ("picker", "(edu.utah.sci.vistrails.basic:Boolean)", True,
#                      {"docstring": "Set the epsilon for picking used by this artist\n*picker* can be one of the following:\n* *None*: picking is disabled for this artist (default)\n* A boolean: if *True* then picking will be enabled and the\nartist will fire a pick event if the mouse event is over\nthe artist\n* A float: if picker is a number it is interpreted as an\nepsilon tolerance in points and the artist will fire\noff an event if it's data is within epsilon of the mouse\nevent.  For some artists like lines and patch collections,\nthe artist may provide additional data to the pick event\nthat is generated, e.g. the indices of the data within\nepsilon of the pick event\n* A function: if picker is callable, it is a user supplied\nfunction which determines whether the artist is hit by the\nmouse event::\nhit, props = picker(artist, mouseevent)\nto determine the hit test.  if the mouse event is over the\nartist, return *hit=True* and props is a dictionary of\nproperties you want added to the PickEvent attributes.\nACCEPTS: [None|float|boolean|callable]"}),
#                     ("rasterized", "(edu.utah.sci.vistrails.basic:Boolean)", True,
#                      {"docstring": "Force rasterized (bitmap) drawing in vector backend output.\nDefaults to None, which implies the backend's default behavior\nACCEPTS: [True | False | None]"}),
#                     ("snap", "(edu.utah.sci.vistrails.basic:Boolean)", True,
#                      {"docstring": "Sets the snap setting which may be:\n* True: snap vertices to the nearest pixel center\n* False: leave vertices as-is\n* None: (auto) If the path contains only rectilinear line\nsegments, round to the nearest pixel center\nOnly supported by the Agg and MacOSX backends."}),
#                     # ("transform", "(edu.utah.sci.vistrails.basic:String)", True,
#                     #  {"docstring": "Set the :class:`~matplotlib.transforms.Transform` instance\nused by this artist.\nACCEPTS: :class:`~matplotlib.transforms.Transform` instance"}),
#                     ("url", "(edu.utah.sci.vistrails.basic:String)", True,
#                      {"docstring": "Sets the url for the artist\nACCEPTS: a url string"}),
#                     ("visible", "(edu.utah.sci.vistrails.basic:Boolean)", True,
#                      {"docstring": "Set the artist's visiblity.\nACCEPTS: [True | False]"}),
#                     ("zorder", "(edu.utah.sci.vistrails.basic:Float)", True,
#                      {"docstring": "Set the zorder for the artist.  Artists with lower zorder\nvalues are drawn first.\nACCEPTS: any number"})]

    def get_translation(self, port, val):
        for klass in self.__class__.mro():
            if '_mpl_translations' in klass.__dict__ and \
                    port in klass._mpl_translations:
                obj = klass._mpl_translations[port]
                if isinstance(obj, dict):
                    if val in obj:
                        return obj[val]
                    else:
                        raise ArtistException(
                            "Value '%s' for input '%s' invalid." % (val, port))
                else:
                    print "trying to call"
                    return obj(val)
        return None

    def get_kwargs(self):
        kwargs = {}
        for port in self.inputPorts:
            val = self.getInputFromPort(port)
            translation = self.get_translation(port, val)
            if translation is not None:
                kwargs[port] = translation
            else:
                kwargs[port] = val
        return kwargs

    def compute(self):
        self.kwargs = self.get_kwargs()
        for k,v in self.kwargs.iteritems():
            print "%s: %s" % (k, str(v))
        self.setResult('self', self)

# class MplLine2D(MplArtist):
#     _input_ports = [("antialiased", "(edu.utah.sci.vistrails.basic:Boolean)",
#                      {"optional": True,
#                       "docstring": "True if line should be drawin with antialiased rendering\nACCEPTS: [True | False]"}),
#                     ("axes", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the :class:`~matplotlib.axes.Axes` instance in which the\nartist resides, if any.\nACCEPTS: an :class:`~matplotlib.axes.Axes` instance"}),
#                     ("color", "(edu.utah.sci.vistrails.basic:Color)",
#                      {"optional": True,
#                       "docstring": "Set the color of the line\nACCEPTS: any matplotlib color"}),
#                     ("dash_capstyle", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the cap style for dashed linestyles\nACCEPTS: ['butt' | 'round' | 'projecting']",
#                       "entry_types": ["enum"],
#                       "values": [['butt', 'round', 'projecting']]}),
#                     ("dash_joinstyle", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the join style for dashed linestyles\nACCEPTS: ['miter' | 'round' | 'bevel']",
#                       "entry_types": ["enum"],
#                       "values": [['miter', 'round', 'bevel']]}),
#                     ("dashes", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the dash sequence, sequence of dashes with on off ink in\npoints.  If seq is empty or if seq = (None, None), the\nlinestyle will be set to solid.\nACCEPTS: sequence of on/off ink in points"}),
#                     ("data", "(edu.utah.sci.vistrails.basic:List)",
#                      {"optional": True,
#                       "docstring": "Set the x and y data\nACCEPTS: 2D array (rows are x, y) or two 1D arrays"}),
#                     ("drawstyle", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the drawstyle of the plot\n'default' connects the points with lines. The steps variants\nproduce step-plots. 'steps' is equivalent to 'steps-pre' and\nis maintained for backward-compatibility.\nACCEPTS: [ 'default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post' ]",
#                       "entry_types": ["enum"],
#                       "values": [['default', 'steps', 'steps-pre', 'steps-mid', 'steps-post']]}),
#                     ("fillstyle", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the marker fill style; 'full' means fill the whole marker.\nThe other options are for half filled markers\nACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top']",
#                       "entry_types": ["enum"],
#                       "values": [['full', 'left', 'right', 'bottom', 'top']]}),
#                     ("linestyle", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the linestyle of the line (also accepts drawstyles)\n================    =================\nlinestyle           description\n================    =================\n``'-'``             solid\n``'--'``            dashed\n``'-.'``            dash_dot\n``':'``             dotted\n``'None'``          draw nothing\n``' '``             draw nothing\n``''``              draw nothing\n================    =================\n'steps' is equivalent to 'steps-pre' and is maintained for\nbackward-compatibility.\n.. seealso::\n:meth:`set_drawstyle`\nTo set the drawing style (stepping) of the plot.\nACCEPTS: [ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''`` ]\nand any drawstyle in combination with a linestyle, e.g. ``'steps--'``.",
#                       "entry_types": ["enum"],
#                       "values": [['dash_dot', 'dashed', 'dotted', 'draw nothing', 'solid']]}),
#                     ("linewidth", "(edu.utah.sci.vistrails.basic:Float)",
#                      {"optional": True,
#                       "docstring": "Set the line width in points\nACCEPTS: float value in points"}),
#                     ("marker", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the line marker\n========== ==========================\nmarker     description\n========== ==========================\n``'.'``    point\n``','``    pixel\n``'o'``    circle\n``'v'``    triangle_down\n``'^'``    triangle_up\n``'<'``    triangle_left\n``'>'``    triangle_right\n``'1'``    tri_down\n``'2'``    tri_up\n``'3'``    tri_left\n``'4'``    tri_right\n``'s'``    square\n``'p'``    pentagon\n``'*'``    star\n``'h'``    hexagon1\n``'H'``    hexagon2\n``'+'``    plus\n``'x'``    x\n``'D'``    diamond\n``'d'``    thin_diamond\n``'|'``    vline\n``'_'``    hline\nTICKLEFT   tickleft\nTICKRIGHT  tickright\nTICKUP     tickup\nTICKDOWN   tickdown\nCARETLEFT  caretleft\nCARETRIGHT caretright\nCARETUP    caretup\nCARETDOWN  caretdown\n``'None'`` nothing\n``' '``    nothing\n``''``     nothing\n'$...$'    render the string using mathtext\n========== ==========================\nACCEPTS: [ ``'+'`` | ``'*'`` | ``','`` | ``'.'``\n| ``'1'`` | ``'2'`` | ``'3'`` | ``'4'``\n| ``'<'`` | ``'>'`` | ``'D'`` | ``'H'``\n| ``'^'`` | ``'_'`` | ``'d'`` | ``'h'``\n| ``'o'`` | ``'p'`` | ``'s'`` | ``'v'``\n| ``'x'`` | ``'|'``\n| TICKUP | TICKDOWN | TICKLEFT | TICKRIGHT\n| CARETUP | CARETDOWN | CARETLEFT | CARETRIGHT\n| ``'None'`` | ``' '`` | ``''`` | '$...$']",
#                       "entry_types": ["enum"],
#                       "values": [['caretdown', 'caretleft', 'caretright', 'caretup', 'circle', 'diamond', 'hexagon1', 'hexagon2', 'hline', 'nothing', 'pentagon', 'pixel', 'plus', 'point', 'render the string using mathtext', 'square', 'star', 'thin_diamond', 'tickdown', 'tickleft', 'tickright', 'tickup', 'tri_down', 'tri_left', 'tri_right', 'tri_up', 'triangle_down', 'triangle_left', 'triangle_right', 'triangle_up', 'vline', 'x']]}),
#                     ("markeredgecolor", "(edu.utah.sci.vistrails.basic:Color)",
#                      {"optional": True,
#                       "docstring": "Set the marker edge color\nACCEPTS: any matplotlib color"}),
#                     ("markeredgewidth", "(edu.utah.sci.vistrails.basic:Float)",
#                      {"optional": True,
#                       "docstring": "Set the marker edge width in points\nACCEPTS: float value in points"}),
#                     ("markerfacecolor", "(edu.utah.sci.vistrails.basic:Color)",
#                      {"optional": True,
#                       "docstring": "Set the marker face color.\nACCEPTS: any matplotlib color"}),
#                     ("markerfacecoloralt", "(edu.utah.sci.vistrails.basic:Color)",
#                      {"optional": True,
#                       "docstring": "Set the alternate marker face color.\nACCEPTS: any matplotlib color"}),
#                     ("markersize", "(edu.utah.sci.vistrails.basic:Float)",
#                      {"optional": True,
#                       "docstring": "Set the marker size in points\nACCEPTS: float"}),
#                     ("markevery", "(edu.utah.sci.vistrails.basic:Integer)",
#                      {"optional": True,
#                       "docstring": "Set the markevery property to subsample the plot when using\nmarkers.  Eg if ``markevery=5``, every 5-th marker will be\nplotted.  *every* can be\nNone\nEvery point will be plotted\nan integer N\nEvery N-th marker will be plotted starting with marker 0\nA length-2 tuple of integers\nevery=(start, N) will start at point start and plot every N-th marker\nACCEPTS: None | integer | (startind, stride)"}),
#                     ("picker", "(edu.utah.sci.vistrails.basic:Float)",
#                      {"optional": True,
#                       "docstring": "Sets the event picker details for the line.\nACCEPTS: float distance in points or callable pick function\n``fn(artist, event)``"}),
#                     ("pickradius", "(edu.utah.sci.vistrails.basic:Float)",
#                      {"optional": True,
#                       "docstring": "Sets the pick radius used for containment tests\nACCEPTS: float distance in points"}),
#                     ("solid_capstyle", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the cap style for solid linestyles\nACCEPTS: ['butt' | 'round' |  'projecting']",
#                       "entry_types": ["enum"],
#                       "values": [['butt', 'round', 'projecting']]}),
#                     ("solid_joinstyle", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the join style for solid linestyles\nACCEPTS: ['miter' | 'round' | 'bevel']",
#                       "entry_types": ["enum"],
#                       "values": [['miter', 'round', 'bevel']]}),
#                     ("transform", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "set the Transformation instance used by this artist\nACCEPTS: a :class:`matplotlib.transforms.Transform` instance"}),
#                     ("xdata", "(edu.utah.sci.vistrails.basic:List)",
#                      {"optional": True,
#                       "docstring": "Set the data np.array for x\nACCEPTS: 1D array"}),
#                     ("ydata", "(edu.utah.sci.vistrails.basic:List)",
#                      {"optional": True,
#                       "docstring": "Set the data np.array for y\nACCEPTS: 1D array"})]

#         # # ("aa", "(edu.utah.sci.vistrails.basic:String)", True,
#         #             #  {"docstring": "alias for set_antialiased"}),
#         #             ("antialiased", "(edu.utah.sci.vistrails.basic:Boolean)", True,
#         #              {"docstring": "True if line should be drawin with antialiased rendering\nACCEPTS: [True | False]"}),
#         #             # ("axes", "(edu.utah.sci.vistrails.basic:String)", True,
#         #             #  {"docstring": "Set the :class:`~matplotlib.axes.Axes` instance in which the\nartist resides, if any.\nACCEPTS: an :class:`~matplotlib.axes.Axes` instance"}),
#         #             # ("c", "(edu.utah.sci.vistrails.basic:String)", True,
#         #             #  {"docstring": "alias for set_color"}),
#         #             ("color", "(edu.utah.sci.vistrails.basic:Color)", True,
#         #              {"docstring": "Set the color of the line\nACCEPTS: any matplotlib color"}),
#         #             ("dash_capstyle", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the cap style for dashed linestyles\nACCEPTS: ['butt' | 'round' | 'projecting']",
#         #               'entry_types': '["enum"]',
#         #               "values": [['butt','round','projecting']]}),
#         #             ("dash_joinstyle", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the join style for dashed linestyles\nACCEPTS: ['miter' | 'round' | 'bevel']",
#         #               'entry_types': '["enum"]',
#         #               "values": [['miter', 'round', 'bevel']]}),
#         #             ("dashes", "(edu.utah.sci.vistrails.basic:List)", True,
#         #              {"docstring": "Set the dash sequence, sequence of dashes with on off ink in\npoints.  If seq is empty or if seq = (None, None), the\nlinestyle will be set to solid.\nACCEPTS: sequence of on/off ink in points"}),
#         #             # ("data", "(edu.utah.sci.vistrails.basic:String)", True,
#         #             #  {"docstring": "Set the x and y data\nACCEPTS: 2D array (rows are x, y) or two 1D arrays"}),
#         #             ("drawstyle", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the drawstyle of the plot\n'default' connects the points with lines. The steps variants\nproduce step-plots. 'steps' is equivalent to 'steps-pre' and\nis maintained for backward-compatibility.\nACCEPTS: [ 'default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post' ]",
#         #               'entry_types': '["enum"]',
#         #               "values": [["default", "steps", "steps-pre", "steps-mid", "steps-post"]]}),
#         #             ("fillstyle", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the marker fill style; 'full' means fill the whole marker.\nThe other options are for half filled markers\nACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top']",
#         #               'entry_types': '["enum"]',
#         #               "values": [['full', 'left', 'right', 'bottom', 'top']]}),
#         #             ("linestyle", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the linestyle of the line (also accepts drawstyles)\n================    =================\nlinestyle           description\n================    =================\n``'-'``             solid\n``'--'``            dashed\n``'-.'``            dash_dot\n``':'``             dotted\n``'None'``          draw nothing\n``' '``             draw nothing\n``''``              draw nothing\n================    =================\n'steps' is equivalent to 'steps-pre' and is maintained for\nbackward-compatibility.\n.. seealso::\n:meth:`set_drawstyle`\nTo set the drawing style (stepping) of the plot.\nACCEPTS: [ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''`` ]\nand any drawstyle in combination with a linestyle, e.g. ``'steps--'``."},
#         #              'entry_types': '["enum"]',
#         #              "values": [["-", "--", "-.", ":", "None"]]}),
#         #             ("linewidth", "(edu.utah.sci.vistrails.basic:Float)", True,
#         #              {"docstring": "Set the line width in points\nACCEPTS: float value in points"}),
#         #             # ("ls", "(edu.utah.sci.vistrails.basic:String)", True,
#         #             #  {"docstring": "alias for set_linestyle"}),
#         #             # ("lw", "(edu.utah.sci.vistrails.basic:String)", True,
#         #             #  {"docstring": "alias for set_linewidth"}),
#         #             ("marker", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the line marker\n========== ==========================\nmarker     description\n========== ==========================\n``'.'``    point\n``','``    pixel\n``'o'``    circle\n``'v'``    triangle_down\n``'^'``    triangle_up\n``'<'``    triangle_left\n``'>'``    triangle_right\n``'1'``    tri_down\n``'2'``    tri_up\n``'3'``    tri_left\n``'4'``    tri_right\n``'s'``    square\n``'p'``    pentagon\n``'*'``    star\n``'h'``    hexagon1\n``'H'``    hexagon2\n``'+'``    plus\n``'x'``    x\n``'D'``    diamond\n``'d'``    thin_diamond\n``'|'``    vline\n``'_'``    hline\nTICKLEFT   tickleft\nTICKRIGHT  tickright\nTICKUP     tickup\nTICKDOWN   tickdown\nCARETLEFT  caretleft\nCARETRIGHT caretright\nCARETUP    caretup\nCARETDOWN  caretdown\n``'None'`` nothing\n``' '``    nothing\n``''``     nothing\n'$...$'    render the string using mathtext\n========== ==========================\nACCEPTS: [ ``'+'`` | ``'*'`` | ``','`` | ``'.'``\n| ``'1'`` | ``'2'`` | ``'3'`` | ``'4'``\n| ``'<'`` | ``'>'`` | ``'D'`` | ``'H'``\n| ``'^'`` | ``'_'`` | ``'d'`` | ``'h'``\n| ``'o'`` | ``'p'`` | ``'s'`` | ``'v'``\n| ``'x'`` | ``'|'``\n| TICKUP | TICKDOWN | TICKLEFT | TICKRIGHT\n| CARETUP | CARETDOWN | CARETLEFT | CARETRIGHT\n| ``'None'`` | ``' '`` | ``''`` | '$...$']"}),
#         #             ("markeredgecolor", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the marker edge color\nACCEPTS: any matplotlib color"}),
#         #             ("markeredgewidth", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the marker edge width in points\nACCEPTS: float value in points"}),
#         #             ("markerfacecolor", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the marker face color.\nACCEPTS: any matplotlib color"}),
#         #             ("markerfacecoloralt", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the alternate marker face color.\nACCEPTS: any matplotlib color"}),
#         #             ("markersize", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the marker size in points\nACCEPTS: float"}),
#         #             ("markevery", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the markevery property to subsample the plot when using\nmarkers.  Eg if ``markevery=5``, every 5-th marker will be\nplotted.  *every* can be\nNone\nEvery point will be plotted\nan integer N\nEvery N-th marker will be plotted starting with marker 0\nA length-2 tuple of integers\nevery=(start, N) will start at point start and plot every N-th marker\nACCEPTS: None | integer | (startind, stride)"}),
#         #             ("mec", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "alias for set_markeredgecolor"}),
#         #             ("mew", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "alias for set_markeredgewidth"}),
#         #             ("mfc", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "alias for set_markerfacecolor"}),
#         #             ("mfcalt", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "alias for set_markerfacecoloralt"}),
#         #             ("ms", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "alias for set_markersize"}),
#         #             ("picker", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Sets the event picker details for the line.\nACCEPTS: float distance in points or callable pick function\n``fn(artist, event)``"}),
#         #             ("pickradius", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Sets the pick radius used for containment tests\nACCEPTS: float distance in points"}),
#         #             ("solid_capstyle", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the cap style for solid linestyles\nACCEPTS: ['butt' | 'round' |  'projecting']"}),
#         #             ("solid_joinstyle", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the join style for solid linestyles\nACCEPTS: ['miter' | 'round' | 'bevel']"}),
#         #             ("transform", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "set the Transformation instance used by this artist\nACCEPTS: a :class:`matplotlib.transforms.Transform` instance"}),
#         #             ("xdata", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the data np.array for x\nACCEPTS: 1D array"}),
#         #             ("ydata", "(edu.utah.sci.vistrails.basic:String)", True,
#         #              {"docstring": "Set the data np.array for y\nACCEPTS: 1D array"})]

    
#     _mpl_translations = {'color': translate_color, 'markerfacecolor': translate_color, 'markeredgecolor': translate_color, 'marker': {'square': 's', 'point': '.', 'tickdown': 3, 'triangle_right': '>', 'tickup': 2, 'caretup': 6, 'hline': '_', 'vline': '|', 'caretleft': 4, 'pentagon': 'p', 'tri_left': '3', 'caretright': 5, 'tickright': 1, 'render the string using mathtext': '$...$', 'tickleft': 0, 'tri_up': '2', 'circle': 'o', 'pixel': ',', 'diamond': 'D', 'star': '*', 'hexagon1': 'h', 'hexagon2': 'H', 'tri_right': '4', 'nothing': '', 'thin_diamond': 'd', 'tri_down': '1', 'triangle_left': '<', 'caretdown': 7, 'plus': '+', 'triangle_down': 'v', 'triangle_up': '^', 'x': 'x'}, 'markerfacecoloralt': translate_color, 'linestyle': {'solid': '-', 'dashed': '--', 'dash_dot': '-.', 'dotted': ':', 'draw nothing': ''}}

class MplLine2DProperties(MplArtistProperties):
    _input_ports = [
        ("antialiased", "(edu.utah.sci.vistrails.basic:Boolean)",
         {"optional": True,
          "docstring": "True if line should be drawin with antialiased rendering\nACCEPTS: [True | False]"}),
        ("axes", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the :class:`~matplotlib.axes.Axes` instance in which the\nartist resides, if any.\nACCEPTS: an :class:`~matplotlib.axes.Axes` instance"}),
        ("color", "(edu.utah.sci.vistrails.basic:Color)",
         {"optional": True,
          "docstring": "Set the color of the line\nACCEPTS: any matplotlib color"}),
        ("dash_capstyle", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the cap style for dashed linestyles\nACCEPTS: ['butt' | 'round' | 'projecting']",
          "entry_types": ["enum"],
          "values": [['butt', 'round', 'projecting']]}),
        ("dash_joinstyle", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the join style for dashed linestyles\nACCEPTS: ['miter' | 'round' | 'bevel']",
          "entry_types": ["enum"],
          "values": [['miter', 'round', 'bevel']]}),
        ("dashes", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the dash sequence, sequence of dashes with on off ink in\npoints.  If seq is empty or if seq = (None, None), the\nlinestyle will be set to solid.\nACCEPTS: sequence of on/off ink in points"}),
        ("data", "(edu.utah.sci.vistrails.basic:List)",
         {"optional": True,
          "docstring": "Set the x and y data\nACCEPTS: 2D array (rows are x, y) or two 1D arrays"}),
        ("drawstyle", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the drawstyle of the plot\n'default' connects the points with lines. The steps variants\nproduce step-plots. 'steps' is equivalent to 'steps-pre' and\nis maintained for backward-compatibility.\nACCEPTS: [ 'default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post' ]",
          "entry_types": ["enum"],
          "values": [['default', 'steps', 'steps-pre', 'steps-mid', 'steps-post']]}),
        ("fillstyle", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the marker fill style; 'full' means fill the whole marker.\nThe other options are for half filled markers\nACCEPTS: ['full' | 'left' | 'right' | 'bottom' | 'top']",
          "entry_types": ["enum"],
          "values": [['full', 'left', 'right', 'bottom', 'top']]}),
        ("linestyle", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the linestyle of the line (also accepts drawstyles)\n================    =================\nlinestyle           description\n================    =================\n``'-'``             solid\n``'--'``            dashed\n``'-.'``            dash_dot\n``':'``             dotted\n``'None'``          draw nothing\n``' '``             draw nothing\n``''``              draw nothing\n================    =================\n'steps' is equivalent to 'steps-pre' and is maintained for\nbackward-compatibility.\n.. seealso::\n:meth:`set_drawstyle`\nTo set the drawing style (stepping) of the plot.\nACCEPTS: [ ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''`` ]\nand any drawstyle in combination with a linestyle, e.g. ``'steps--'``.",
          "entry_types": ["enum"],
          "values": [['dash_dot', 'dashed', 'dotted', 'draw nothing', 'solid']]}),
        ("linewidth", "(edu.utah.sci.vistrails.basic:Float)",
         {"optional": True,
          "docstring": "Set the line width in points\nACCEPTS: float value in points"}),
        ("marker", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the line marker\n============================== ===============================================\nmarker                         description\n============================== ===============================================\n``7``                          caretdown\n``4``                          caretleft\n``5``                          caretright\n``6``                          caretup\n``'o'``                        circle\n``'D'``                        diamond\n``'h'``                        hexagon1\n``'H'``                        hexagon2\n``'_'``                        hline\n``''``                         nothing\n``'None'``                     nothing\n``None``                       nothing\n``' '``                        nothing\n``'8'``                        octagon\n``'p'``                        pentagon\n``','``                        pixel\n``'+'``                        plus\n``'.'``                        point\n``'s'``                        square\n``'*'``                        star\n``'d'``                        thin_diamond\n``3``                          tickdown\n``0``                          tickleft\n``1``                          tickright\n``2``                          tickup\n``'1'``                        tri_down\n``'3'``                        tri_left\n``'4'``                        tri_right\n``'2'``                        tri_up\n``'v'``                        triangle_down\n``'<'``                        triangle_left\n``'>'``                        triangle_right\n``'^'``                        triangle_up\n``'|'``                        vline\n``'x'``                        x\n``'$...$'``                    render the string using mathtext\n*verts*                        a list of (x, y) pairs in range (0, 1)\n(*numsides*, *style*, *angle*) see below\n============================== ===============================================\nThe marker can also be a tuple (*numsides*, *style*, *angle*), which\nwill create a custom, regular symbol.\n*numsides*:\nthe number of sides\n*style*:\nthe style of the regular symbol:\n=====   =============================================\nValue   Description\n=====   =============================================\n0       a regular polygon\n1       a star-like symbol\n2       an asterisk\n3       a circle (*numsides* and *angle* is ignored)\n=====   =============================================\n*angle*:\nthe angle of rotation of the symbol\nFor backward compatibility, the form (*verts*, 0) is also accepted,\nbut it is equivalent to just *verts* for giving a raw set of vertices\nthat define the shape.\nACCEPTS: [ ``7`` | ``4`` | ``5`` | ``6`` | ``'o'`` | ``'D'`` | ``'h'``\n| ``'H'`` | ``'_'`` | ``''`` | ``'None'`` | ``None`` | ``' '`` |\n``'8'`` | ``'p'`` | ``','`` | ``'+'`` | ``'.'`` | ``'s'`` | ``'*'`` |\n``'d'`` | ``3`` | ``0`` | ``1`` | ``2`` | ``'1'`` | ``'3'`` | ``'4'``\n| ``'2'`` | ``'v'`` | ``'<'`` | ``'>'`` | ``'^'`` | ``'|'`` | ``'x'``\n| ``'$...$'`` | *tuple* | *Nx2 array* ]",
          "entry_types": ["enum"],
          "values": [['a circle (*numsides* and *angle* is ignored)', 'a list of (x, y) pairs in range (0, 1)', 'a regular polygon', 'a star-like symbol', 'an asterisk', 'caretdown', 'caretleft', 'caretright', 'caretup', 'circle', 'diamond', 'hexagon1', 'hexagon2', 'hline', 'nothing', 'octagon', 'pentagon', 'pixel', 'plus', 'point', 'render the string using mathtext', 'see below', 'square', 'star', 'thin_diamond', 'tickdown', 'tickleft', 'tickright', 'tickup', 'tri_down', 'tri_left', 'tri_right', 'tri_up', 'triangle_down', 'triangle_left', 'triangle_right', 'triangle_up', 'vline', 'x']]}),
        ("markeredgecolor", "(edu.utah.sci.vistrails.basic:Color)",
         {"optional": True,
          "docstring": "Set the marker edge color\nACCEPTS: any matplotlib color"}),
        ("markeredgewidth", "(edu.utah.sci.vistrails.basic:Float)",
         {"optional": True,
          "docstring": "Set the marker edge width in points\nACCEPTS: float value in points"}),
        ("markerfacecolor", "(edu.utah.sci.vistrails.basic:Color)",
         {"optional": True,
          "docstring": "Set the marker face color.\nACCEPTS: any matplotlib color"}),
        ("markerfacecoloralt", "(edu.utah.sci.vistrails.basic:Color)",
         {"optional": True,
          "docstring": "Set the alternate marker face color.\nACCEPTS: any matplotlib color"}),
        ("markersize", "(edu.utah.sci.vistrails.basic:Float)",
         {"optional": True,
          "docstring": "Set the marker size in points\nACCEPTS: float"}),
        ("markevery", "(edu.utah.sci.vistrails.basic:Integer)",
         {"optional": True,
          "docstring": "Set the markevery property to subsample the plot when using\nmarkers.  Eg if ``markevery=5``, every 5-th marker will be\nplotted.  *every* can be\nNone\nEvery point will be plotted\nan integer N\nEvery N-th marker will be plotted starting with marker 0\nA length-2 tuple of integers\nevery=(start, N) will start at point start and plot every N-th marker\nACCEPTS: None | integer | (startind, stride)"}),
        ("picker", "(edu.utah.sci.vistrails.basic:Float)",
         {"optional": True,
          "docstring": "Sets the event picker details for the line.\nACCEPTS: float distance in points or callable pick function\n``fn(artist, event)``"}),
        ("pickradius", "(edu.utah.sci.vistrails.basic:Float)",
         {"optional": True,
          "docstring": "Sets the pick radius used for containment tests\nACCEPTS: float distance in points"}),
        ("solid_capstyle", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the cap style for solid linestyles\nACCEPTS: ['butt' | 'round' |  'projecting']",
          "entry_types": ["enum"],
          "values": [['butt', 'round', 'projecting']]}),
        ("solid_joinstyle", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the join style for solid linestyles\nACCEPTS: ['miter' | 'round' | 'bevel']",
          "entry_types": ["enum"],
          "values": [['miter', 'round', 'bevel']]}),
        ("transform", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "set the Transformation instance used by this artist\nACCEPTS: a :class:`matplotlib.transforms.Transform` instance"}),
        ("xdata", "(edu.utah.sci.vistrails.basic:List)",
         {"optional": True,
          "docstring": "Set the data np.array for x\nACCEPTS: 1D array"}),
        ("ydata", "(edu.utah.sci.vistrails.basic:List)",
         {"optional": True,
          "docstring": "Set the data np.array for y\nACCEPTS: 1D array"}),
        ]
    _output_ports = [('self', "(MplLine2DProperties)")]

    _mpl_translations = {'color': translate_color, 'markerfacecolor': translate_color, 'markeredgecolor': translate_color, 'marker': {'caretright': 5, 'point': '.', 'triangle_right': '>', 'tickup': 2, 'square': 's', 'a regular polygon': 0, 'vline': '|', 'caretleft': 4, 'pentagon': 'p', 'tri_left': '3', 'a circle (*numsides* and *angle* is ignored)': 3, 'x': 'x', 'tickright': 1, 'tri_right': '4', 'see below': '(*numsides*, *style*, *angle*)', 'tickleft': 0, 'tri_up': '2', 'circle': 'o', 'pixel': ',', 'diamond': 'D', 'star': '*', 'hexagon1': 'h', 'hexagon2': 'H', 'an asterisk': 2, 'octagon': '8', 'tickdown': 3, 'nothing': ' ', 'thin_diamond': 'd', 'tri_down': '1', 'triangle_left': '<', 'render the string using mathtext': '$...$', 'a star-like symbol': 1, 'a list of (x, y) pairs in range (0, 1)': '*verts*', 'caretdown': 7, 'hline': '_', 'plus': '+', 'triangle_down': 'v', 'triangle_up': '^', 'caretup': 6}, 'markerfacecoloralt': translate_color, 'linestyle': {'solid': '-', 'dashed': '--', 'dash_dot': '-.', 'dotted': ':', 'draw nothing': ''}}

class MplPatchProperties(MplArtistProperties):
    _input_ports = [
        ("alpha", "(edu.utah.sci.vistrails.basic:Float)",
         {"optional": True,
          "docstring": "Set the alpha tranparency of the patch.\nACCEPTS: float or None"}),
        ("antialiased", "(edu.utah.sci.vistrails.basic:Boolean)",
         {"optional": True,
          "docstring": "Set whether to use antialiased rendering\nACCEPTS: [True | False]  or None for default"}),
        ("color", "(edu.utah.sci.vistrails.basic:Color)",
         {"optional": True,
          "docstring": "Set both the edgecolor and the facecolor.\nACCEPTS: matplotlib color spec\n.. seealso::\n:meth:`set_facecolor`, :meth:`set_edgecolor`\nFor setting the edge or face color individually."}),
        ("edgecolor", "(edu.utah.sci.vistrails.basic:Color)",
         {"optional": True,
          "docstring": "Set the patch edge color\nACCEPTS: mpl color spec, or None for default, or 'none' for no color"}),
        ("facecolor", "(edu.utah.sci.vistrails.basic:Color)",
         {"optional": True,
          "docstring": "Set the patch face color\nACCEPTS: mpl color spec, or None for default, or 'none' for no color"}),
        ("fill", "(edu.utah.sci.vistrails.basic:Boolean)",
         {"optional": True,
          "docstring": "Set whether to fill the patch\nACCEPTS: [True | False]"}),
        ("hatch", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the hatching pattern\n*hatch* can be one of::\n/   - diagonal hatching\n\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\nLetters can be combined, in which case all the specified\nhatchings are done.  If same letter repeats, it increases the\ndensity of hatching of that pattern.\nHatching is supported in the PostScript, PDF, SVG and Agg\nbackends only.\nACCEPTS: [ '/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]",
          "entry_types": ["enum"],
          "values": [['/', '\\\\', '', '', '-', '+', 'x', 'o', 'O', '.', '*']]}),
        ("linestyle", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "Set the patch linestyle\nACCEPTS: ['solid' | 'dashed' | 'dashdot' | 'dotted']",
          "entry_types": ["enum"],
          "values": [['solid', 'dashed', 'dashdot', 'dotted']]}),
        ("linewidth", "(edu.utah.sci.vistrails.basic:Float)",
         {"optional": True,
          "docstring": "Set the patch linewidth in points\nACCEPTS: float or None for default"}),
        ("path_effects", "(edu.utah.sci.vistrails.basic:String)",
         {"optional": True,
          "docstring": "set path_effects, which should be a list of instances of\nmatplotlib.patheffect._Base class or its derivatives."}),
        ]
    _output_ports = [('self', "(MplPatchProperties)")]

    _mpl_translations = {'color': translate_color, 'edgecolor': translate_color, 'facecolor': translate_color}


# class MplPatch(MplArtist):
#     _input_ports = [("alpha", "(edu.utah.sci.vistrails.basic:Float)",
#                      {"optional": True,
#                       "docstring": "Set the alpha tranparency of the patch.\nACCEPTS: float or None"}),
#                     ("antialiased", "(edu.utah.sci.vistrails.basic:Boolean)",
#                      {"optional": True,
#                       "docstring": "Set whether to use antialiased rendering\nACCEPTS: [True | False]  or None for default"}),
#                     ("color", "(edu.utah.sci.vistrails.basic:Color)",
#                      {"optional": True,
#                       "docstring": "Set both the edgecolor and the facecolor.\nACCEPTS: matplotlib color spec\n.. seealso::\n:meth:`set_facecolor`, :meth:`set_edgecolor`\nFor setting the edge or face color individually."}),
#                     ("edgecolor", "(edu.utah.sci.vistrails.basic:Color)",
#                      {"optional": True,
#                       "docstring": "Set the patch edge color\nACCEPTS: mpl color spec, or None for default, or 'none' for no color"}),
#                     ("facecolor", "(edu.utah.sci.vistrails.basic:Color)",
#                      {"optional": True,
#                       "docstring": "Set the patch face color\nACCEPTS: mpl color spec, or None for default, or 'none' for no color"}),
#                     ("fill", "(edu.utah.sci.vistrails.basic:Boolean)",
#                      {"optional": True,
#                       "docstring": "Set whether to fill the patch\nACCEPTS: [True | False]"}),
#                     ("hatch", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the hatching pattern\n*hatch* can be one of::\n/   - diagonal hatching\n\   - back diagonal\n|   - vertical\n-   - horizontal\n+   - crossed\nx   - crossed diagonal\no   - small circle\nO   - large circle\n.   - dots\n*   - stars\nLetters can be combined, in which case all the specified\nhatchings are done.  If same letter repeats, it increases the\ndensity of hatching of that pattern.\nHatching is supported in the PostScript, PDF, SVG and Agg\nbackends only.\nACCEPTS: [ '/' | '\\' | '|' | '-' | '+' | 'x' | 'o' | 'O' | '.' | '*' ]",
#                       "entry_types": ["enum"],
#                       "values": [['/', '\\\\', '', '', '-', '+', 'x', 'o', 'O', '.', '*']]}),
#                     ("linestyle", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "Set the patch linestyle\nACCEPTS: ['solid' | 'dashed' | 'dashdot' | 'dotted']",
#                       "entry_types": ["enum"],
#                       "values": [['solid', 'dashed', 'dashdot', 'dotted']]}),
#                     ("linewidth", "(edu.utah.sci.vistrails.basic:Float)",
#                      {"optional": True,
#                       "docstring": "Set the patch linewidth in points\nACCEPTS: float or None for default"}),
#                     ("path_effects", "(edu.utah.sci.vistrails.basic:String)",
#                      {"optional": True,
#                       "docstring": "set path_effects, which should be a list of instances of\nmatplotlib.patheffect._Base class or its derivatives."})]

#     _mpl_translations = {'color': translate_color, 'edgecolor': translate_color, 'facecolor': translate_color}

# MplCollectionProperties
# MplLineCollectionProperties
# MplPatchCollectionProperties
# MplArtistProperties
# MplLine2DProperties
# MplPatchProperties
# MplContourSetProperties

# any plotting module then has Set*Properties for the different pieces
# of the plot
