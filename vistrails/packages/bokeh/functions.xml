<specs>
  <moduleSpec code_ref="annular_wedge" is_method="True" module_name="annular_wedge" namespace="'plotting'" output_type="self">
    <docstring>Configure and add AnnularWedge glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates of the center of the annular wedges. (default None)
    y (DataSpecProperty) : The y-coordinates of the center of the annular wedges. (default None)
    inner_radius (UnitsSpecProperty) : The inner radii of the annular wedges. (default None)
    outer_radius (UnitsSpecProperty) : The outer radii of the annular wedges. (default None)
    start_angle (UnitsSpecProperty) : The angles to start the annular wedges, as measured from the horizontal. (default None)
    end_angle (UnitsSpecProperty) : The angles to end the annular wedges, as measured from the horizontal. (default None)
    direction (BasicProperty) : Which direction to stroke between the start and end angles. (default 'anticlock')

Keyword Args:
    end_angle_units (end_angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the annular wedges. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the annular wedges. (default 'gray')
    inner_radius_units (inner_radius_units:Enum('screen', 'data')) :  (default 'data')
    line_alpha (DataSpecProperty) : The line alpha values for the annular wedges. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the annular wedges. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the annular wedges. (default 'black')
    line_dash (BasicProperty) : The line dash values for the annular wedges. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the annular wedges. (default 0)
    line_join (BasicProperty) : The line join values for the annular wedges. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the annular wedges. (default 1)
    name (name:String) :  (default None)
    outer_radius_units (outer_radius_units:Enum('screen', 'data')) :  (default 'data')
    start_angle_units (start_angle_units:Enum('deg', 'rad')) :  (default 'rad')
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer</docstring>
    <inputPortSpec arg="direction" name="direction">
      <docstring>Which direction to stroke between the start and end angles.
Property: direction:Enum('clock', 'anticlock')
default is 'anticlock'</docstring>
      <defaults>['anticlock']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="end_angle" name="end_angle(str)">
      <docstring>The angles to end the annular wedges, as measured from the horizontal.
Property: end_angle:AngleSpec(units_default='rad')</docstring>
      <alternateSpec arg="end_angle" name="end_angle(float)" port_type="basic:Float" />
      <alternateSpec arg="end_angle" name="end_angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="end_angle" name="end_angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="end_angle_units" name="end_angle_units">
      <docstring>Property: end_angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the annular wedges.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the annular wedges.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="inner_radius" name="inner_radius(str)">
      <docstring>The inner radii of the annular wedges.
Property: inner_radius:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="inner_radius" name="inner_radius(float)" port_type="basic:Float" />
      <alternateSpec arg="inner_radius" name="inner_radius(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="inner_radius" name="inner_radius(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="inner_radius_units" name="inner_radius_units">
      <docstring>Property: inner_radius_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the annular wedges.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the annular wedges.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the annular wedges.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the annular wedges.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the annular wedges.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the annular wedges.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the annular wedges.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="outer_radius" name="outer_radius(str)">
      <docstring>The outer radii of the annular wedges.
Property: outer_radius:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="outer_radius" name="outer_radius(float)" port_type="basic:Float" />
      <alternateSpec arg="outer_radius" name="outer_radius(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="outer_radius" name="outer_radius(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="outer_radius_units" name="outer_radius_units">
      <docstring>Property: outer_radius_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="start_angle" name="start_angle(str)">
      <docstring>The angles to start the annular wedges, as measured from the horizontal.
Property: start_angle:AngleSpec(units_default='rad')</docstring>
      <alternateSpec arg="start_angle" name="start_angle(float)" port_type="basic:Float" />
      <alternateSpec arg="start_angle" name="start_angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="start_angle" name="start_angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="start_angle_units" name="start_angle_units">
      <docstring>Property: start_angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates of the center of the annular wedges.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates of the center of the annular wedges.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="annulus" is_method="True" module_name="annulus" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Annulus glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates of the center of the annuli. (default None)
    y (DataSpecProperty) : The y-coordinates of the center of the annuli. (default None)
    inner_radius (UnitsSpecProperty) : The inner radii of the annuli. (default None)
    outer_radius (UnitsSpecProperty) : The outer radii of the annuli. (default None)

Keyword Args:
    fill_alpha (DataSpecProperty) : The fill alpha values for the annuli. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the annuli. (default 'gray')
    inner_radius_units (inner_radius_units:Enum('screen', 'data')) :  (default 'data')
    line_alpha (DataSpecProperty) : The line alpha values for the annuli. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the annuli. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the annuli. (default 'black')
    line_dash (BasicProperty) : The line dash values for the annuli. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the annuli. (default 0)
    line_join (BasicProperty) : The line join values for the annuli. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the annuli. (default 1)
    name (name:String) :  (default None)
    outer_radius_units (outer_radius_units:Enum('screen', 'data')) :  (default 'data')
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

        .. bokeh-plot::
            :source-position: above

            from bokeh.plotting import figure, output_file, show

            plot = figure(width=300, height=300)
            plot.annulus(x=[1, 2, 3], y=[1, 2, 3], color="#7FC97F",
                         inner_radius=0.2, outer_radius=0.5)

            show(plot)</docstring>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the annuli.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the annuli.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="inner_radius" name="inner_radius(str)">
      <docstring>The inner radii of the annuli.
Property: inner_radius:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="inner_radius" name="inner_radius(float)" port_type="basic:Float" />
      <alternateSpec arg="inner_radius" name="inner_radius(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="inner_radius" name="inner_radius(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="inner_radius_units" name="inner_radius_units">
      <docstring>Property: inner_radius_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the annuli.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the annuli.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the annuli.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the annuli.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the annuli.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the annuli.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the annuli.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="outer_radius" name="outer_radius(str)">
      <docstring>The outer radii of the annuli.
Property: outer_radius:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="outer_radius" name="outer_radius(float)" port_type="basic:Float" />
      <alternateSpec arg="outer_radius" name="outer_radius(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="outer_radius" name="outer_radius(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="outer_radius_units" name="outer_radius_units">
      <docstring>Property: outer_radius_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates of the center of the annuli.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates of the center of the annuli.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="arc" is_method="True" module_name="arc" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Arc glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates of the center of the arcs. (default None)
    y (DataSpecProperty) : The y-coordinates of the center of the arcs. (default None)
    radius (UnitsSpecProperty) : Radius of the arc. (default None)
    start_angle (UnitsSpecProperty) : The angles to start the arcs, as measured from the horizontal. (default None)
    end_angle (UnitsSpecProperty) : The angles to end the arcs, as measured from the horizontal. (default None)
    direction (BasicProperty) : Which direction to stroke between the start and end angles. (default 'clock')

Keyword Args:
    end_angle_units (end_angle_units:Enum('deg', 'rad')) :  (default 'rad')
    line_alpha (DataSpecProperty) : The line alpha values for the arcs. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the arcs. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the arcs. (default 'black')
    line_dash (BasicProperty) : The line dash values for the arcs. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the arcs. (default 0)
    line_join (BasicProperty) : The line join values for the arcs. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the arcs. (default 1)
    name (name:String) :  (default None)
    radius_units (radius_units:Enum('screen', 'data')) :  (default 'data')
    start_angle_units (start_angle_units:Enum('deg', 'rad')) :  (default 'rad')
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer</docstring>
    <inputPortSpec arg="direction" name="direction">
      <docstring>Which direction to stroke between the start and end angles.
Property: direction:Enum('clock', 'anticlock')
default is 'clock'</docstring>
      <defaults>['clock']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="end_angle" name="end_angle(str)">
      <docstring>The angles to end the arcs, as measured from the horizontal.
Property: end_angle:AngleSpec(units_default='rad')</docstring>
      <alternateSpec arg="end_angle" name="end_angle(float)" port_type="basic:Float" />
      <alternateSpec arg="end_angle" name="end_angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="end_angle" name="end_angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="end_angle_units" name="end_angle_units">
      <docstring>Property: end_angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the arcs.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the arcs.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the arcs.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the arcs.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the arcs.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the arcs.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the arcs.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="radius" name="radius(str)">
      <docstring>Radius of the arc.
Property: radius:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="radius" name="radius(float)" port_type="basic:Float" />
      <alternateSpec arg="radius" name="radius(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="radius" name="radius(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="radius_units" name="radius_units">
      <docstring>Property: radius_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="start_angle" name="start_angle(str)">
      <docstring>The angles to start the arcs, as measured from the horizontal.
Property: start_angle:AngleSpec(units_default='rad')</docstring>
      <alternateSpec arg="start_angle" name="start_angle(float)" port_type="basic:Float" />
      <alternateSpec arg="start_angle" name="start_angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="start_angle" name="start_angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="start_angle_units" name="start_angle_units">
      <docstring>Property: start_angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates of the center of the arcs.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates of the center of the arcs.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="asterisk" is_method="True" module_name="asterisk" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Asterisk glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.asterisk(x=[1,2,3], y=[1,2,3], size=20, color="#F0027F")

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="bezier" is_method="True" module_name="bezier" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Bezier glyphs to this Figure.

Args:
    x0 (DataSpecProperty) : The x-coordinates of the starting points. (default None)
    y0 (DataSpecProperty) : The y-coordinates of the starting points. (default None)
    x1 (DataSpecProperty) : The x-coordinates of the ending points. (default None)
    y1 (DataSpecProperty) : The y-coordinates of the ending points. (default None)
    cx0 (DataSpecProperty) : The x-coordinates of first control points. (default None)
    cy0 (DataSpecProperty) : The y-coordinates of first control points. (default None)
    cx1 (DataSpecProperty) : The x-coordinates of second control points. (default None)
    cy1 (DataSpecProperty) : The y-coordinates of second control points. (default None)

Keyword Args:
    line_alpha (DataSpecProperty) : The line alpha values for the B&#233;zier curves. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the B&#233;zier curves. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the B&#233;zier curves. (default 'black')
    line_dash (BasicProperty) : The line dash values for the B&#233;zier curves. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the B&#233;zier curves. (default 0)
    line_join (BasicProperty) : The line join values for the B&#233;zier curves. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the B&#233;zier curves. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer</docstring>
    <inputPortSpec arg="cx0" name="cx0(str)">
      <docstring>The x-coordinates of first control points.
Property: cx0:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="cx0" name="cx0(float)" port_type="basic:Float" />
      <alternateSpec arg="cx0" name="cx0(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="cx0" name="cx0(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="cx1" name="cx1(str)">
      <docstring>The x-coordinates of second control points.
Property: cx1:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="cx1" name="cx1(float)" port_type="basic:Float" />
      <alternateSpec arg="cx1" name="cx1(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="cx1" name="cx1(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="cy0" name="cy0(str)">
      <docstring>The y-coordinates of first control points.
Property: cy0:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="cy0" name="cy0(float)" port_type="basic:Float" />
      <alternateSpec arg="cy0" name="cy0(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="cy0" name="cy0(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="cy1" name="cy1(str)">
      <docstring>The y-coordinates of second control points.
Property: cy1:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="cy1" name="cy1(float)" port_type="basic:Float" />
      <alternateSpec arg="cy1" name="cy1(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="cy1" name="cy1(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the B&#233;zier curves.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the B&#233;zier curves.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the B&#233;zier curves.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the B&#233;zier curves.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the B&#233;zier curves.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the B&#233;zier curves.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the B&#233;zier curves.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x0" name="x0(str)">
      <docstring>The x-coordinates of the starting points.
Property: x0:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x0" name="x0(float)" port_type="basic:Float" />
      <alternateSpec arg="x0" name="x0(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x0" name="x0(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="x1" name="x1(str)">
      <docstring>The x-coordinates of the ending points.
Property: x1:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x1" name="x1(float)" port_type="basic:Float" />
      <alternateSpec arg="x1" name="x1(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x1" name="x1(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y0" name="y0(str)">
      <docstring>The y-coordinates of the starting points.
Property: y0:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y0" name="y0(float)" port_type="basic:Float" />
      <alternateSpec arg="y0" name="y0(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y0" name="y0(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y1" name="y1(str)">
      <docstring>The y-coordinates of the ending points.
Property: y1:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y1" name="y1(float)" port_type="basic:Float" />
      <alternateSpec arg="y1" name="y1(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y1" name="y1(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="circle" is_method="True" module_name="circle" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Circle glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)

Keyword Args:
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    radius (UnitsSpecProperty) : The radius values for circle markers (in "data space" units, by default). (default None)
    radius_dimension (BasicProperty) : What dimension to measure circle radii along. (default 'x')
    radius_units (radius_units:Enum('screen', 'data')) :  (default 'data')
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

.. note::
    Only one of ``size`` or ``radius`` should be provided. Note that ``radius``
    defaults to data units.

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.circle(x=[1, 2, 3], y=[1, 2, 3], size=20)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="radius" name="radius(str)">
      <docstring>The radius values for circle markers (in "data space" units, by default).

    .. note::
        Circle markers are slightly unusual in that they support specifying
        a radius in addition to a size. Only one of ``radius`` or ``size``
        should be given.

    .. warning::
        Note that ``Circle`` glyphs are always drawn as circles on the screen,
        even in cases where the data space aspect ratio is not 1-1. In all
        cases where radius values are specified, the "distance" for the radius
        is measured along the dimension specified by ``radius_dimension``. If
        the aspect ratio is very large or small, the drawn circles may appear
        much larger or smaller than expected. See :bokeh-issue:`626` for more
        information.
Property: radius:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="radius" name="radius(float)" port_type="basic:Float" />
      <alternateSpec arg="radius" name="radius(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="radius" name="radius(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="radius_dimension" name="radius_dimension">
      <docstring>What dimension to measure circle radii along.

    When the data space aspect ratio is not 1-1, then the size of the drawn
    circles depends on what direction is used to measure the "distance" of
    the radius. This property allows that direction to be controlled.
Property: radius_dimension:Enum('x', 'y')
default is 'x'</docstring>
      <defaults>['x']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="radius_units" name="radius_units">
      <docstring>Property: radius_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="circle_cross" is_method="True" module_name="circle_cross" namespace="'plotting'" output_type="self">
    <docstring>Configure and add CircleCross glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.circle_cross(x=[1,2,3], y=[4,5,6], size=20,
                          color="#FB8072", fill_alpha=0.2, line_width=2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="circle_x" is_method="True" module_name="circle_x" namespace="'plotting'" output_type="self">
    <docstring>Configure and add CircleX glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.circle_x(x=[1, 2, 3], y=[1, 2, 3], size=20,
                     color="#DD1C77", fill_alpha=0.2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="cross" is_method="True" module_name="cross" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Cross glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.cross(x=[1, 2, 3], y=[1, 2, 3], size=20,
                   color="#E6550D", line_width=2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="diamond" is_method="True" module_name="diamond" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Diamond glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.diamond(x=[1, 2, 3], y=[1, 2, 3], size=20,
                    color="#1C9099", line_width=2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="diamond_cross" is_method="True" module_name="diamond_cross" namespace="'plotting'" output_type="self">
    <docstring>Configure and add DiamondCross glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.diamond_cross(x=[1, 2, 3], y=[1, 2, 3], size=20,
                           color="#386CB0", fill_color=None, line_width=2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="image" is_method="True" module_name="image" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Image glyphs to this Figure.

Args:
    image (DataSpecProperty) : The arrays of scalar data for the images to be colormapped. (default None)
    x (DataSpecProperty) : The x-coordinates to locate the image anchors. (default None)
    y (DataSpecProperty) : The y-coordinates to locate the image anchors. (default None)
    dw (UnitsSpecProperty) : The widths of the plot regions that the images will occupy. (default None)
    dh (UnitsSpecProperty) : The height of the plot region that the image will occupy. (default None)
    dilate (BasicProperty) : Whether to always round fractional pixel locations in such a way as to make the images bigger. (default False)

Keyword Args:
    color_mapper (BasicProperty) : A ``ColorMapper`` to use to map the scalar data from ``image`` into RGBA values for display. (default None)
    dh_units (dh_units:Enum('screen', 'data')) :  (default 'data')
    dw_units (dw_units:Enum('screen', 'data')) :  (default 'data')
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer</docstring>
    <inputPortSpec arg="color_mapper" name="color_mapper" port_type="basic:Color">
      <docstring>A ``ColorMapper`` to use to map the scalar data from ``image``
    into RGBA values for display.

    .. note::
        The color mapping step happens on the client.
Property: color_mapper:Instance(LinearColorMapper)</docstring>
    </inputPortSpec>
    <inputPortSpec arg="dh" name="dh(str)">
      <docstring>The height of the plot region that the image will occupy.

    .. note::
        This is not the number of pixels that an image is tall.
        That number is fixed by the image itself.
Property: dh:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="dh" name="dh(float)" port_type="basic:Float" />
      <alternateSpec arg="dh" name="dh(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="dh" name="dh(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="dh_units" name="dh_units">
      <docstring>Property: dh_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="dilate" name="dilate" port_type="basic:Boolean">
      <docstring>Whether to always round fractional pixel locations in such a way
    as to make the images bigger.

    This setting may be useful if pixel rounding errors are causing
    images to have a gap between them, when they should appear flush.
Property: dilate:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="dw" name="dw(str)">
      <docstring>The widths of the plot regions that the images will occupy.

    .. note::
        This is not the number of pixels that an image is wide.
        That number is fixed by the image itself.
Property: dw:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="dw" name="dw(float)" port_type="basic:Float" />
      <alternateSpec arg="dw" name="dw(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="dw" name="dw(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="dw_units" name="dw_units">
      <docstring>Property: dw_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="image" name="image(str)">
      <docstring>The arrays of scalar data for the images to be colormapped.
Property: image:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="image" name="image(float)" port_type="basic:Float" />
      <alternateSpec arg="image" name="image(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="image" name="image(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates to locate the image anchors.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates to locate the image anchors.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="image_rgba" is_method="True" module_name="image_rgba" namespace="'plotting'" output_type="self">
    <docstring>Configure and add ImageRGBA glyphs to this Figure.

Args:
    image (DataSpecProperty) : The arrays of RGBA data for the images. (default None)
    x (DataSpecProperty) : The x-coordinates to locate the image anchors. (default None)
    y (DataSpecProperty) : The y-coordinates to locate the image anchors. (default None)
    dw (UnitsSpecProperty) : The widths of the plot regions that the images will occupy. (default None)
    dh (UnitsSpecProperty) : The height of the plot region that the image will occupy. (default None)
    dilate (BasicProperty) : Whether to always round fractional pixel locations in such a way as to make the images bigger. (default False)

Keyword Args:
    cols (DataSpecProperty) : The numbers of columns in the images (default None)
    dh_units (dh_units:Enum('screen', 'data')) :  (default 'data')
    dw_units (dw_units:Enum('screen', 'data')) :  (default 'data')
    name (name:String) :  (default None)
    rows (DataSpecProperty) : The numbers of rows in the images (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

.. note::
    The ``image_rgba`` method accepts images as a two-dimensional array of RGBA
    values (encoded as 32-bit integers).</docstring>
    <inputPortSpec arg="cols" name="cols(str)">
      <docstring>The numbers of columns in the images
Property: cols:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="cols" name="cols(float)" port_type="basic:Float" />
      <alternateSpec arg="cols" name="cols(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="cols" name="cols(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="dh" name="dh(str)">
      <docstring>The height of the plot region that the image will occupy.

    .. note::
        This is not the number of pixels that an image is tall.
        That number is fixed by the image itself.
Property: dh:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="dh" name="dh(float)" port_type="basic:Float" />
      <alternateSpec arg="dh" name="dh(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="dh" name="dh(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="dh_units" name="dh_units">
      <docstring>Property: dh_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="dilate" name="dilate" port_type="basic:Boolean">
      <docstring>Whether to always round fractional pixel locations in such a way
    as to make the images bigger.

    This setting may be useful if pixel rounding errors are causing
    images to have a gap between them, when they should appear flush.
Property: dilate:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="dw" name="dw(str)">
      <docstring>The widths of the plot regions that the images will occupy.

    .. note::
        This is not the number of pixels that an image is wide.
        That number is fixed by the image itself.
Property: dw:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="dw" name="dw(float)" port_type="basic:Float" />
      <alternateSpec arg="dw" name="dw(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="dw" name="dw(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="dw_units" name="dw_units">
      <docstring>Property: dw_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="image" name="image(str)">
      <docstring>The arrays of RGBA data for the images.
Property: image:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="image" name="image(float)" port_type="basic:Float" />
      <alternateSpec arg="image" name="image(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="image" name="image(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="rows" name="rows(str)">
      <docstring>The numbers of rows in the images
Property: rows:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="rows" name="rows(float)" port_type="basic:Float" />
      <alternateSpec arg="rows" name="rows(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="rows" name="rows(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates to locate the image anchors.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates to locate the image anchors.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="image_url" is_method="True" module_name="image_url" namespace="'plotting'" output_type="self">
    <docstring>Configure and add ImageURL glyphs to this Figure.

Args:
    url (DataSpecProperty) : The URLs to retrieve images from. (default None)
    x (DataSpecProperty) : The x-coordinates to locate the image anchors. (default None)
    y (DataSpecProperty) : The y-coordinates to locate the image anchors. (default None)
    w (UnitsSpecProperty) : The widths of the plot regions that the images will occupy. (default None)
    h (UnitsSpecProperty) : The height of the plot region that the image will occupy. (default None)
    angle (UnitsSpecProperty) : The angles to rotate the images, as measured from the horizontal. (default 0)
    global_alpha (BasicProperty) : An overall opacity that each image is rendered with (in addition to any inherent alpha values in the image itself). (default 1.0)
    dilate (BasicProperty) : Whether to always round fractional pixel locations in such a way as to make the images bigger. (default False)

Keyword Args:
    anchor (BasicProperty) : What position of the image should be anchored at the `x`, `y` coordinates. (default 'top_left')
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    h_units (h_units:Enum('screen', 'data')) :  (default 'data')
    name (name:String) :  (default None)
    retry_attempts (BasicProperty) : Number of attempts to retry loading the images from the specified URL. Default is zero. (default 0)
    retry_timeout (BasicProperty) : Timeout (in ms) between retry attempts to load the image from the specified URL. Default is zero ms. (default 0)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)
    w_units (w_units:Enum('screen', 'data')) :  (default 'data')

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer</docstring>
    <inputPortSpec arg="anchor" name="anchor">
      <docstring>What position of the image should be anchored at the `x`, `y`
    coordinates.
Property: anchor:Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center')
default is 'top_left'</docstring>
      <defaults>['top_left']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="angle" name="angle(str)">
      <docstring>The angles to rotate the images, as measured from the horizontal.
Property: angle:AngleSpec(units_default='rad')
default is 0</docstring>
      <alternateSpec arg="angle" name="angle(float)" port_type="basic:Float" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="dilate" name="dilate" port_type="basic:Boolean">
      <docstring>Whether to always round fractional pixel locations in such a way
    as to make the images bigger.

    This setting may be useful if pixel rounding errors are causing
    images to have a gap between them, when they should appear flush.
Property: dilate:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="global_alpha" name="global_alpha" port_type="basic:Float">
      <docstring>An overall opacity that each image is rendered with (in addition
    to any inherent alpha values in the image itself).
Property: global_alpha:Float
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="h" name="h(str)">
      <docstring>The height of the plot region that the image will occupy.

    .. note::
        This is not the number of pixels that an image is tall.
        That number is fixed by the image itself.

    .. note::
        This may be renamed to "dh" in the future.
Property: h:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="h" name="h(float)" port_type="basic:Float" />
      <alternateSpec arg="h" name="h(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="h" name="h(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="h_units" name="h_units">
      <docstring>Property: h_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="retry_attempts" name="retry_attempts" port_type="basic:Integer">
      <docstring>Number of attempts to retry loading the images from the specified URL.
    Default is zero.
Property: retry_attempts:Int
default is 0</docstring>
    </inputPortSpec>
    <inputPortSpec arg="retry_timeout" name="retry_timeout" port_type="basic:Integer">
      <docstring>Timeout (in ms) between retry attempts to load the image from the
    specified URL. Default is zero ms.
Property: retry_timeout:Int
default is 0</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="url" name="url(str)">
      <docstring>The URLs to retrieve images from.

    .. note::
        The actual retrieving and loading of the images happens on
        the client.
Property: url:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="url" name="url(float)" port_type="basic:Float" />
      <alternateSpec arg="url" name="url(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="url" name="url(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="w" name="w(str)">
      <docstring>The widths of the plot regions that the images will occupy.

    .. note::
        This is not the number of pixels that an image is wide.
        That number is fixed by the image itself.

    .. note::
        This may be renamed to "dw" in the future.
Property: w:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="w" name="w(float)" port_type="basic:Float" />
      <alternateSpec arg="w" name="w(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="w" name="w(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="w_units" name="w_units">
      <docstring>Property: w_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates to locate the image anchors.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates to locate the image anchors.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="inverted_triangle" is_method="True" module_name="inverted_triangle" namespace="'plotting'" output_type="self">
    <docstring>Configure and add InvertedTriangle glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.inverted_triangle(x=[1, 2, 3], y=[1, 2, 3], size=20, color="#DE2D26")

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="line" is_method="True" module_name="line" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Line glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates for the points of the line. (default None)
    y (DataSpecProperty) : The y-coordinates for the points of the line. (default None)

Keyword Args:
    line_alpha (DataSpecProperty) : The line alpha values for the line. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the line. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the line. (default 'black')
    line_dash (BasicProperty) : The line dash values for the line. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the line. (default 0)
    line_join (BasicProperty) : The line join values for the line. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the line. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
       :source-position: above

       from bokeh.plotting import figure, output_file, show

       p = figure(title="line", plot_width=300, plot_height=300)
       p.line(x=[1, 2, 3, 4, 5], y=[6, 7, 2, 4, 5])

       show(p)</docstring>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the line.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the line.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the line.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the line.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the line.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the line.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the line.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates for the points of the line.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates for the points of the line.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="multi_line" is_method="True" module_name="multi_line" namespace="'plotting'" output_type="self">
    <docstring>Configure and add MultiLine glyphs to this Figure.

Args:
    xs (DataSpecProperty) : The x-coordinates for all the lines, given as a "list of lists". (default None)
    ys (DataSpecProperty) : The x-coordinates for all the lines, given as a "list of lists". (default None)

Keyword Args:
    line_alpha (DataSpecProperty) : The line alpha values for the lines. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the lines. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the lines. (default 'black')
    line_dash (BasicProperty) : The line dash values for the lines. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the lines. (default 0)
    line_join (BasicProperty) : The line join values for the lines. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the lines. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

.. note::
    For this glyph, the data is not simply an array of scalars, it is an
    "array of arrays".

Examples:

    .. bokeh-plot::
       :source-position: above

       from bokeh.plotting import figure, output_file, show

       p = figure(plot_width=300, plot_height=300)
       p.multi_line(xs=[[1, 2, 3], [2, 3, 4]], ys=[[6, 7, 2], [4, 5, 7]],
                    color=['red','green'])

       show(p)</docstring>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the lines.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the lines.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the lines.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the lines.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the lines.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the lines.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the lines.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xs" name="xs(str)">
      <docstring>The x-coordinates for all the lines, given as a "list of lists".
Property: xs:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="xs" name="xs(float)" port_type="basic:Float" />
      <alternateSpec arg="xs" name="xs(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="xs" name="xs(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="ys" name="ys(str)">
      <docstring>The x-coordinates for all the lines, given as a "list of lists".
Property: ys:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="ys" name="ys(float)" port_type="basic:Float" />
      <alternateSpec arg="ys" name="ys(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="ys" name="ys(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="oval" is_method="True" module_name="oval" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Oval glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates of the centers of the ovals. (default None)
    y (DataSpecProperty) : The y-coordinates of the centers of the ovals. (default None)
    width (UnitsSpecProperty) : The overall widths of each oval. (default None)
    height (UnitsSpecProperty) : The overall height of each oval. (default None)
    angle (UnitsSpecProperty) : The angle the ovals are rotated from horizontal. [rad] (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the ovals. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the ovals. (default 'gray')
    height_units (height_units:Enum('screen', 'data')) :  (default 'data')
    line_alpha (DataSpecProperty) : The line alpha values for the ovals. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the ovals. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the ovals. (default 'black')
    line_dash (BasicProperty) : The line dash values for the ovals. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the ovals. (default 0)
    line_join (BasicProperty) : The line join values for the ovals. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the ovals. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)
    width_units (width_units:Enum('screen', 'data')) :  (default 'data')

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.oval(x=[1, 2, 3], y=[1, 2, 3], width=0.2, height=0.4,
                  angle=-0.7, color="#1D91C0")

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angle the ovals are rotated from horizontal. [rad]
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the ovals.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the ovals.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="height" name="height(str)">
      <docstring>The overall height of each oval.
Property: height:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="height" name="height(float)" port_type="basic:Float" />
      <alternateSpec arg="height" name="height(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="height" name="height(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="height_units" name="height_units">
      <docstring>Property: height_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the ovals.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the ovals.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the ovals.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the ovals.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the ovals.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the ovals.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the ovals.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="width" name="width(str)">
      <docstring>The overall widths of each oval.
Property: width:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="width" name="width(float)" port_type="basic:Float" />
      <alternateSpec arg="width" name="width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="width" name="width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="width_units" name="width_units">
      <docstring>Property: width_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates of the centers of the ovals.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates of the centers of the ovals.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="patch" is_method="True" module_name="patch" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Patch glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates for the points of the patch. (default None)
    y (DataSpecProperty) : The y-coordinates for the points of the patch. (default None)

Keyword Args:
    fill_alpha (DataSpecProperty) : The fill alpha values for the patch. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the patch. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the patch. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the patch. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the patch. (default 'black')
    line_dash (BasicProperty) : The line dash values for the patch. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the patch. (default 0)
    line_join (BasicProperty) : The line join values for the patch. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the patch. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
       :source-position: above

       from bokeh.plotting import figure, output_file, show

       p = figure(plot_width=300, plot_height=300)
       p.patch(x=[1, 2, 3, 2], y=[6, 7, 2, 2], color="#99d8c9")

       show(p)</docstring>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the patch.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the patch.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the patch.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the patch.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the patch.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the patch.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the patch.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the patch.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the patch.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates for the points of the patch.

    .. note::
        A patch may comprise multiple polygons. In this case the
        x-coordinates for each polygon should be separated by NaN
        values in the sequence.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates for the points of the patch.

    .. note::
        A patch may comprise multiple polygons. In this case the
        y-coordinates for each polygon should be separated by NaN
        values in the sequence.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="patches" is_method="True" module_name="patches" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Patches glyphs to this Figure.

Args:
    xs (DataSpecProperty) : The x-coordinates for all the patches, given as a "list of lists". (default None)
    ys (DataSpecProperty) : The y-coordinates for all the patches, given as a "list of lists". (default None)

Keyword Args:
    fill_alpha (DataSpecProperty) : The fill alpha values for the patches. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the patches. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the patches. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the patches. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the patches. (default 'black')
    line_dash (BasicProperty) : The line dash values for the patches. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the patches. (default 0)
    line_join (BasicProperty) : The line join values for the patches. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the patches. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

.. note::
    For this glyph, the data is not simply an array of scalars, it is an
    "array of arrays".

Examples:

    .. bokeh-plot::
       :source-position: above

       from bokeh.plotting import figure, output_file, show

       p = figure(plot_width=300, plot_height=300)
       p.patches(xs=[[1,2,3],[4,5,6,5]], ys=[[1,2,1],[4,5,5,4]],
                color=["#43a2ca", "#a8ddb5"])

       show(p)</docstring>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the patches.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the patches.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the patches.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the patches.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the patches.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the patches.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the patches.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the patches.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the patches.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xs" name="xs(str)">
      <docstring>The x-coordinates for all the patches, given as a "list of lists".

    .. note::
        Individual patches may comprise multiple polygons. In this case
        the x-coordinates for each polygon should be separated by NaN
        values in the sublists.
Property: xs:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="xs" name="xs(float)" port_type="basic:Float" />
      <alternateSpec arg="xs" name="xs(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="xs" name="xs(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="ys" name="ys(str)">
      <docstring>The y-coordinates for all the patches, given as a "list of lists".

    .. note::
        Individual patches may comprise multiple polygons. In this case
        the y-coordinates for each polygon should be separated by NaN
        values in the sublists.
Property: ys:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="ys" name="ys(float)" port_type="basic:Float" />
      <alternateSpec arg="ys" name="ys(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="ys" name="ys(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="quad" is_method="True" module_name="quad" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Quad glyphs to this Figure.

Args:
    left (DataSpecProperty) : The x-coordinates of the left edges. (default None)
    right (DataSpecProperty) : The x-coordinates of the right edges. (default None)
    top (DataSpecProperty) : The y-coordinates of the top edges. (default None)
    bottom (DataSpecProperty) : The y-coordinates of the bottom edges. (default None)

Keyword Args:
    fill_alpha (DataSpecProperty) : The fill alpha values for the quads. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the quads. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the quads. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the quads. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the quads. (default 'black')
    line_dash (BasicProperty) : The line dash values for the quads. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the quads. (default 0)
    line_join (BasicProperty) : The line join values for the quads. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the quads. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.quad(top=[2, 3, 4], bottom=[1, 2, 3], left=[1, 2, 3],
            right=[1.2, 2.5, 3.7], color="#B3DE69")

        show(plot)</docstring>
    <inputPortSpec arg="bottom" name="bottom(str)">
      <docstring>The y-coordinates of the bottom edges.
Property: bottom:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="bottom" name="bottom(float)" port_type="basic:Float" />
      <alternateSpec arg="bottom" name="bottom(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="bottom" name="bottom(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the quads.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the quads.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="left" name="left(str)">
      <docstring>The x-coordinates of the left edges.
Property: left:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="left" name="left(float)" port_type="basic:Float" />
      <alternateSpec arg="left" name="left(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="left" name="left(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the quads.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the quads.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the quads.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the quads.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the quads.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the quads.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the quads.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="right" name="right(str)">
      <docstring>The x-coordinates of the right edges.
Property: right:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="right" name="right(float)" port_type="basic:Float" />
      <alternateSpec arg="right" name="right(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="right" name="right(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="top" name="top(str)">
      <docstring>The y-coordinates of the top edges.
Property: top:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="top" name="top(float)" port_type="basic:Float" />
      <alternateSpec arg="top" name="top(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="top" name="top(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="quadratic" is_method="True" module_name="quadratic" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Quadratic glyphs to this Figure.

Args:
    x0 (DataSpecProperty) : The x-coordinates of the starting points. (default None)
    y0 (DataSpecProperty) : The y-coordinates of the starting points. (default None)
    x1 (DataSpecProperty) : The x-coordinates of the ending points. (default None)
    y1 (DataSpecProperty) : The y-coordinates of the ending points. (default None)
    cx (DataSpecProperty) : The x-coordinates of the control points. (default None)
    cy (DataSpecProperty) : The y-coordinates of the control points. (default None)

Keyword Args:
    line_alpha (DataSpecProperty) : The line alpha values for the parabolas. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the parabolas. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the parabolas. (default 'black')
    line_dash (BasicProperty) : The line dash values for the parabolas. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the parabolas. (default 0)
    line_join (BasicProperty) : The line join values for the parabolas. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the parabolas. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer</docstring>
    <inputPortSpec arg="cx" name="cx(str)">
      <docstring>The x-coordinates of the control points.
Property: cx:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="cx" name="cx(float)" port_type="basic:Float" />
      <alternateSpec arg="cx" name="cx(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="cx" name="cx(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="cy" name="cy(str)">
      <docstring>The y-coordinates of the control points.
Property: cy:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="cy" name="cy(float)" port_type="basic:Float" />
      <alternateSpec arg="cy" name="cy(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="cy" name="cy(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the parabolas.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the parabolas.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the parabolas.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the parabolas.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the parabolas.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the parabolas.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the parabolas.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x0" name="x0(str)">
      <docstring>The x-coordinates of the starting points.
Property: x0:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x0" name="x0(float)" port_type="basic:Float" />
      <alternateSpec arg="x0" name="x0(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x0" name="x0(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="x1" name="x1(str)">
      <docstring>The x-coordinates of the ending points.
Property: x1:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x1" name="x1(float)" port_type="basic:Float" />
      <alternateSpec arg="x1" name="x1(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x1" name="x1(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y0" name="y0(str)">
      <docstring>The y-coordinates of the starting points.
Property: y0:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y0" name="y0(float)" port_type="basic:Float" />
      <alternateSpec arg="y0" name="y0(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y0" name="y0(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y1" name="y1(str)">
      <docstring>The y-coordinates of the ending points.
Property: y1:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y1" name="y1(float)" port_type="basic:Float" />
      <alternateSpec arg="y1" name="y1(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y1" name="y1(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="ray" is_method="True" module_name="ray" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Ray glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates to start the rays. (default None)
    y (DataSpecProperty) : The y-coordinates to start the rays. (default None)
    length (UnitsSpecProperty) : The length to extend the ray. Note that this ``length`` defaults to screen units. (default None)
    angle (UnitsSpecProperty) : The angles in radians to extend the rays, as measured from the horizontal. (default None)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    length_units (length_units:Enum('screen', 'data')) :  (default 'data')
    line_alpha (DataSpecProperty) : The line alpha values for the rays. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the rays. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the rays. (default 'black')
    line_dash (BasicProperty) : The line dash values for the rays. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the rays. (default 0)
    line_join (BasicProperty) : The line join values for the rays. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the rays. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.ray(x=[1, 2, 3], y=[1, 2, 3], length=45, angle=-0.7, color="#FB8072",
                 line_width=2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(str)">
      <docstring>The angles in radians to extend the rays, as measured from the horizontal.
Property: angle:AngleSpec(units_default='rad')</docstring>
      <alternateSpec arg="angle" name="angle(float)" port_type="basic:Float" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="length" name="length(str)">
      <docstring>The length to extend the ray. Note that this ``length`` defaults
    to screen units.
Property: length:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="length" name="length(float)" port_type="basic:Float" />
      <alternateSpec arg="length" name="length(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="length" name="length(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="length_units" name="length_units">
      <docstring>Property: length_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the rays.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the rays.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the rays.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the rays.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the rays.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the rays.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the rays.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates to start the rays.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates to start the rays.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="rect" is_method="True" module_name="rect" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Rect glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates of the centers of the rectangles. (default None)
    y (DataSpecProperty) : The y-coordinates of the centers of the rectangles. (default None)
    width (UnitsSpecProperty) : The overall widths of the rectangles. (default None)
    height (UnitsSpecProperty) : The overall heights of the rectangles. (default None)
    angle (UnitsSpecProperty) : The angles to rotate the rectangles, as measured from the horizontal. (default 0.0)
    dilate (BasicProperty) : Whether to always round fractional pixel locations in such a way as to make the rectangles bigger. (default False)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the rectangles. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the rectangles. (default 'gray')
    height_units (height_units:Enum('screen', 'data')) :  (default 'data')
    line_alpha (DataSpecProperty) : The line alpha values for the rectangles. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the rectangles. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the rectangles. (default 'black')
    line_dash (BasicProperty) : The line dash values for the rectangles. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the rectangles. (default 0)
    line_join (BasicProperty) : The line join values for the rectangles. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the rectangles. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)
    width_units (width_units:Enum('screen', 'data')) :  (default 'data')

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.rect(x=[1, 2, 3], y=[1, 2, 3], width=10, height=20, color="#CAB2D6",
            width_units="screen", height_units="screen")

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the rectangles, as measured from the horizontal.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="dilate" name="dilate" port_type="basic:Boolean">
      <docstring>Whether to always round fractional pixel locations in such a way
    as to make the rectangles bigger.

    This setting may be useful if pixel rounding errors are causing
    rectangles to have a gap between them, when they should appear
    flush.
Property: dilate:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the rectangles.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the rectangles.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="height" name="height(str)">
      <docstring>The overall heights of the rectangles.
Property: height:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="height" name="height(float)" port_type="basic:Float" />
      <alternateSpec arg="height" name="height(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="height" name="height(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="height_units" name="height_units">
      <docstring>Property: height_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the rectangles.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the rectangles.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the rectangles.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the rectangles.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the rectangles.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the rectangles.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the rectangles.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="width" name="width(str)">
      <docstring>The overall widths of the rectangles.
Property: width:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="width" name="width(float)" port_type="basic:Float" />
      <alternateSpec arg="width" name="width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="width" name="width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="width_units" name="width_units">
      <docstring>Property: width_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates of the centers of the rectangles.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates of the centers of the rectangles.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="segment" is_method="True" module_name="segment" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Segment glyphs to this Figure.

Args:
    x0 (DataSpecProperty) : The x-coordinates of the starting points. (default None)
    y0 (DataSpecProperty) : The y-coordinates of the starting points. (default None)
    x1 (DataSpecProperty) : The x-coordinates of the ending points. (default None)
    y1 (DataSpecProperty) : The y-coordinates of the ending points. (default None)

Keyword Args:
    line_alpha (DataSpecProperty) : The line alpha values for the segments. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the segments. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the segments. (default 'black')
    line_dash (BasicProperty) : The line dash values for the segments. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the segments. (default 0)
    line_join (BasicProperty) : The line join values for the segments. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the segments. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.segment(x0=[1, 2, 3], y0=[1, 2, 3], x1=[1, 2, 3],
                    y1=[1.2, 2.5, 3.7], color="#F4A582",
                    line_width=3)

        show(plot)</docstring>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the segments.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the segments.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the segments.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the segments.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the segments.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the segments.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the segments.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x0" name="x0(str)">
      <docstring>The x-coordinates of the starting points.
Property: x0:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x0" name="x0(float)" port_type="basic:Float" />
      <alternateSpec arg="x0" name="x0(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x0" name="x0(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="x1" name="x1(str)">
      <docstring>The x-coordinates of the ending points.
Property: x1:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x1" name="x1(float)" port_type="basic:Float" />
      <alternateSpec arg="x1" name="x1(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x1" name="x1(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y0" name="y0(str)">
      <docstring>The y-coordinates of the starting points.
Property: y0:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y0" name="y0(float)" port_type="basic:Float" />
      <alternateSpec arg="y0" name="y0(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y0" name="y0(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y1" name="y1(str)">
      <docstring>The y-coordinates of the ending points.
Property: y1:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y1" name="y1(float)" port_type="basic:Float" />
      <alternateSpec arg="y1" name="y1(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y1" name="y1(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="square" is_method="True" module_name="square" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Square glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.square(x=[1, 2, 3], y=[1, 2, 3], size=[10,20,30], color="#74ADD1")

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="square_cross" is_method="True" module_name="square_cross" namespace="'plotting'" output_type="self">
    <docstring>Configure and add SquareCross glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.square_cross(x=[1, 2, 3], y=[1, 2, 3], size=[10,20,25],
                         color="#7FC97F",fill_color=None, line_width=2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="square_x" is_method="True" module_name="square_x" namespace="'plotting'" output_type="self">
    <docstring>Configure and add SquareX glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.square_x(x=[1, 2, 3], y=[1, 2, 3], size=[10,20,25],
                     color="#FDAE6B",fill_color=None, line_width=2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="text" is_method="True" module_name="text" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Text glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates to locate the text anchors. (default None)
    y (DataSpecProperty) : The y-coordinates to locate the text anchors. (default None)
    text (DataSpecProperty) : The text values to render. (default 'text')
    angle (UnitsSpecProperty) : The angles to rotate the text, as measured from the horizontal. (default 0)
    x_offset (DataSpecProperty) : Offset values to apply to the x-coordinates. (default 0)
    y_offset (DataSpecProperty) : Offset values to apply to the y-coordinates. (default 0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    text_align (BasicProperty) : The text align values for the text. (default 'left')
    text_alpha (DataSpecProperty) : The text alpha values for the text. (default 1.0)
    text_baseline (BasicProperty) : The text baseline values for the text. (default 'bottom')
    text_color (DataSpecProperty) : The text color values for the text. (default '#444444')
    text_font (BasicProperty) : The text font values for the text. (default 'helvetica')
    text_font_size (DataSpecProperty) : The text font size values for the text. (default {'value': '12pt'})
    text_font_style (BasicProperty) : The text font style values for the text. (default 'normal')
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

.. note::
    The location and angle of the text relative to the ``x``, ``y`` coordinates
    is indicated by the alignment and baseline text properties.

Returns:
    GlyphRenderer</docstring>
    <inputPortSpec arg="angle" name="angle(str)">
      <docstring>The angles to rotate the text, as measured from the horizontal.
Property: angle:AngleSpec(units_default='rad')
default is 0</docstring>
      <alternateSpec arg="angle" name="angle(float)" port_type="basic:Float" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="text" name="text(str)">
      <docstring>The text values to render.
Property: text:StringSpec(String, Dict(String, Either(String, List(String))), List(String))
default is 'text'</docstring>
      <defaults>['text']</defaults>
      <alternateSpec arg="text" depth="1" name="text(list)" />
      <alternateSpec arg="text" name="text(dict)" port_type="basic:Dictionary" />
    </inputPortSpec>
    <inputPortSpec arg="text_align" name="text_align">
      <docstring>The text align values for the text.
Property: text_align:Enum('left', 'right', 'center')
default is 'left'</docstring>
      <defaults>['left']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="text_alpha" name="text_alpha(float)" port_type="basic:Float">
      <docstring>The text alpha values for the text.
Property: text_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="text_alpha" name="text_alpha(str)" />
      <alternateSpec arg="text_alpha" name="text_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="text_alpha" name="text_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="text_baseline" name="text_baseline">
      <docstring>The text baseline values for the text.
Property: text_baseline:Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging')
default is 'bottom'</docstring>
      <defaults>['bottom']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="text_color" name="text_color(str)">
      <docstring>The text color values for the text.
Property: text_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is '#444444'</docstring>
      <defaults>['#444444']</defaults>
      <alternateSpec arg="text_color" name="text_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="text_font" name="text_font">
      <docstring>The text font values for the text.
Property: text_font:String
default is 'helvetica'</docstring>
      <defaults>['helvetica']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="text_font_size" name="text_font_size(str)">
      <docstring>The text font size values for the text.
Property: text_font_size:FontSizeSpec(String, Dict(String, Either(String, List(String))), List(String))
default is {'value': '12pt'}</docstring>
      <defaults>["{'value':"]</defaults>
      <alternateSpec arg="text_font_size" depth="1" name="text_font_size(list)" />
      <alternateSpec arg="text_font_size" name="text_font_size(dict)" port_type="basic:Dictionary" />
    </inputPortSpec>
    <inputPortSpec arg="text_font_style" name="text_font_style">
      <docstring>The text font style values for the text.
Property: text_font_style:Enum('normal', 'italic', 'bold')
default is 'normal'</docstring>
      <defaults>['normal']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates to locate the text anchors.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="x_offset" name="x_offset(str)">
      <docstring>Offset values to apply to the x-coordinates.

    This is useful, for instance, if it is desired to "float" text a fixed
    distance in screen units from a given data position.
Property: x_offset:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 0</docstring>
      <alternateSpec arg="x_offset" name="x_offset(float)" port_type="basic:Float" />
      <alternateSpec arg="x_offset" name="x_offset(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x_offset" name="x_offset(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates to locate the text anchors.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y_offset" name="y_offset(str)">
      <docstring>Offset values to apply to the y-coordinates.

    This is useful, for instance, if it is desired to "float" text a fixed
    distance in screen units from a given data position.
Property: y_offset:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 0</docstring>
      <alternateSpec arg="y_offset" name="y_offset(float)" port_type="basic:Float" />
      <alternateSpec arg="y_offset" name="y_offset(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y_offset" name="y_offset(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="triangle" is_method="True" module_name="triangle" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Triangle glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.triangle(x=[1, 2, 3], y=[1, 2, 3], size=[10,20,25],
                     color="#99D594", line_width=2)

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="wedge" is_method="True" module_name="wedge" namespace="'plotting'" output_type="self">
    <docstring>Configure and add Wedge glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-coordinates of the points of the wedges. (default None)
    y (DataSpecProperty) : The y-coordinates of the points of the wedges. (default None)
    radius (UnitsSpecProperty) : Radii of the wedges. (default None)
    start_angle (UnitsSpecProperty) : The angles to start the wedges, as measured from the horizontal. (default None)
    end_angle (UnitsSpecProperty) : The angles to end the wedges, as measured from the horizontal. (default None)
    direction (BasicProperty) : Which direction to stroke between the start and end angles. (default 'anticlock')

Keyword Args:
    end_angle_units (end_angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the wedges. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the wedges. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the wedges. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the wedges. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the wedges. (default 'black')
    line_dash (BasicProperty) : The line dash values for the wedges. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the wedges. (default 0)
    line_join (BasicProperty) : The line join values for the wedges. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the wedges. (default 1)
    name (name:String) :  (default None)
    radius_units (radius_units:Enum('screen', 'data')) :  (default 'data')
    start_angle_units (start_angle_units:Enum('deg', 'rad')) :  (default 'rad')
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.wedge(x=[1, 2, 3], y=[1, 2, 3], radius=15, start_angle=0.6,
                     end_angle=4.1, radius_units="screen", color="#2b8cbe")

        show(plot)</docstring>
    <inputPortSpec arg="direction" name="direction">
      <docstring>Which direction to stroke between the start and end angles.
Property: direction:Enum('clock', 'anticlock')
default is 'anticlock'</docstring>
      <defaults>['anticlock']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="end_angle" name="end_angle(str)">
      <docstring>The angles to end the wedges, as measured from the horizontal.
Property: end_angle:AngleSpec(units_default='rad')</docstring>
      <alternateSpec arg="end_angle" name="end_angle(float)" port_type="basic:Float" />
      <alternateSpec arg="end_angle" name="end_angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="end_angle" name="end_angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="end_angle_units" name="end_angle_units">
      <docstring>Property: end_angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the wedges.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the wedges.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the wedges.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the wedges.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the wedges.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the wedges.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the wedges.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the wedges.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the wedges.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="radius" name="radius(str)">
      <docstring>Radii of the wedges.
Property: radius:DistanceSpec(units_default='data')</docstring>
      <alternateSpec arg="radius" name="radius(float)" port_type="basic:Float" />
      <alternateSpec arg="radius" name="radius(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="radius" name="radius(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="radius_units" name="radius_units">
      <docstring>Property: radius_units:Enum('screen', 'data')
default is 'data'</docstring>
      <defaults>['data']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="start_angle" name="start_angle(str)">
      <docstring>The angles to start the wedges, as measured from the horizontal.
Property: start_angle:AngleSpec(units_default='rad')</docstring>
      <alternateSpec arg="start_angle" name="start_angle(float)" port_type="basic:Float" />
      <alternateSpec arg="start_angle" name="start_angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="start_angle" name="start_angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="start_angle_units" name="start_angle_units">
      <docstring>Property: start_angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-coordinates of the points of the wedges.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-coordinates of the points of the wedges.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="x" is_method="True" module_name="x" namespace="'plotting'" output_type="self">
    <docstring>Configure and add X glyphs to this Figure.

Args:
    x (DataSpecProperty) : The x-axis coordinates for the center of the markers. (default None)
    y (DataSpecProperty) : The y-axis coordinates for the center of the markers. (default None)
    size (DataSpecProperty) : The size (diameter) values for the markers in screen space units. (default 4)
    angle (UnitsSpecProperty) : The angles to rotate the markers. (default 0.0)

Keyword Args:
    angle_units (angle_units:Enum('deg', 'rad')) :  (default 'rad')
    fill_alpha (DataSpecProperty) : The fill alpha values for the markers. (default 1.0)
    fill_color (DataSpecProperty) : The fill color values for the markers. (default 'gray')
    line_alpha (DataSpecProperty) : The line alpha values for the markers. (default 1.0)
    line_cap (BasicProperty) : The line cap values for the markers. (default 'butt')
    line_color (DataSpecProperty) : The line color values for the markers. (default 'black')
    line_dash (BasicProperty) : The line dash values for the markers. (default [])
    line_dash_offset (BasicProperty) : The line dash offset values for the markers. (default 0)
    line_join (BasicProperty) : The line join values for the markers. (default 'miter')
    line_width (DataSpecProperty) : The line width values for the markers. (default 1)
    name (name:String) :  (default None)
    tags (tags:List(Any)) :  (default [])
    visible (BasicProperty) : Whether the glyph should render or not. (default True)

Other Parameters:
    alpha (float) : an alias to set all alpha keyword args at once
    color (Color) : an alias to set all color keyword args at once
    data_source (ColumnDataSource) : a user supplied data source
    legend (str) : a legend tag for this glyph
    x_range_name (str) : name an extra range to use for mapping x-coordinates
    y_range_name (str) : name an extra range to use for mapping y-coordinates
    level (Enum) : control the render level order for this glyph

It is also possible to set the color and alpha parameters of a "nonselection"
glyph. To do so, prefix any visual parameter with ``'nonselection_'``.
For example, pass ``nonselection_alpha`` or ``nonselection_fill_alpha``.

Returns:
    GlyphRenderer

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.plotting import figure, output_file, show

        plot = figure(width=300, height=300)
        plot.x(x=[1, 2, 3], y=[1, 2, 3], size=[10, 20, 25], color="#fa9fb5")

        show(plot)</docstring>
    <inputPortSpec arg="angle" name="angle(float)" port_type="basic:Float">
      <docstring>The angles to rotate the markers.
Property: angle:AngleSpec(units_default='rad')
default is 0.0</docstring>
      <defaults>[0.0]</defaults>
      <alternateSpec arg="angle" name="angle(str)" />
      <alternateSpec arg="angle" name="angle(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="angle" name="angle(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="angle_units" name="angle_units">
      <docstring>Property: angle_units:Enum('deg', 'rad')
default is 'rad'</docstring>
      <defaults>['rad']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="fill_alpha" name="fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha values for the markers.
Property: fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="fill_alpha" name="fill_alpha(str)" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="fill_alpha" name="fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="fill_color" name="fill_color(str)">
      <docstring>The fill color values for the markers.
Property: fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'gray'</docstring>
      <defaults>['gray']</defaults>
      <alternateSpec arg="fill_color" name="fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_alpha" name="line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha values for the markers.
Property: line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="line_alpha" name="line_alpha(str)" />
      <alternateSpec arg="line_alpha" name="line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_alpha" name="line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="line_cap" name="line_cap">
      <docstring>The line cap values for the markers.
Property: line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_color" name="line_color(str)">
      <docstring>The line color values for the markers.
Property: line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is 'black'</docstring>
      <defaults>['black']</defaults>
      <alternateSpec arg="line_color" name="line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash" name="line_dash(str)">
      <docstring>The line dash values for the markers.
Property: line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="line_dash" name="line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="line_dash_offset" name="line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset values for the markers.
Property: line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_join" name="line_join">
      <docstring>The line join values for the markers.
Property: line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="line_width" name="line_width(str)">
      <docstring>The line width values for the markers.
Property: line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="line_width" name="line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="line_width" name="line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="line_width" name="line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="size" name="size(str)">
      <docstring>The size (diameter) values for the markers in screen space units.
Property: size:ScreenDistanceSpec(String, Dict(String, Either(String, Float)), Float)
default is 4</docstring>
      <alternateSpec arg="size" name="size(float)" port_type="basic:Float" />
      <alternateSpec arg="size" name="size(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="size" name="size(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="visible" name="visible" port_type="basic:Boolean">
      <docstring>Whether the glyph should render or not.
Property: visible:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)">
      <docstring>The x-axis coordinates for the center of the markers.
Property: x:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="x" name="x(float)" port_type="basic:Float" />
      <alternateSpec arg="x" name="x(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="x" name="x(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)">
      <docstring>The y-axis coordinates for the center of the markers.
Property: y:NumberSpec(String, Dict(String, Either(String, Float)), Float)</docstring>
      <alternateSpec arg="y" name="y(float)" port_type="basic:Float" />
      <alternateSpec arg="y" name="y(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="y" name="y(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="alpha" name="alpha" port_type="basic:Float" show_port="True">
      <docstring>an alias to set all alpha keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Color" show_port="True">
      <docstring>an alias to set all color keyword args at once</docstring>
    </inputPortSpec>
    <inputPortSpec arg="data_source" name="data_source" port_type="basic:Variant" show_port="True">
      <docstring>a user supplied data source</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend" show_port="True">
      <docstring>a legend tag for this glyph</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x_range_name" name="x_range_name" show_port="True">
      <docstring>name an extra range to use for mapping x-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_range_name" name="y_range_name" show_port="True">
      <docstring>name an extra range to use for mapping y-coordinates</docstring>
    </inputPortSpec>
    <inputPortSpec arg="level" name="level" port_type="basic:Variant" show_port="True">
      <docstring>control the render level order for this glyph
</docstring>
    </inputPortSpec>
    <inputPortSpec arg_pos="-4" max_conns="1" min_conns="1" name="Instance" port_type="plotting|Figure" show_port="True" sort_key="-1000">
      <docstring>The class instance to use</docstring>
    </inputPortSpec>
    <outputPortSpec arg="Instance" name="Instance" port_type="plotting|Figure" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="bokeh.plotting.figure" module_name="figure" namespace="'plotting'">
    <docstring>Create a new :class:`~bokeh.plotting.Figure` for plotting, and add it to
the current document.

Returns:
   Figure</docstring>
    <inputPortSpec arg="above" name="above" port_type="basic:List">
      <docstring>A list of renderers to occupy the area above of the plot.
Property: above:List(Instance(Renderer))
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="background_fill_alpha" name="background_fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha for the plot background style.
Property: background_fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="background_fill_alpha" name="background_fill_alpha(str)" />
      <alternateSpec arg="background_fill_alpha" name="background_fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="background_fill_alpha" name="background_fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="background_fill_color" name="background_fill_color(str)">
      <docstring>The fill color for the plot background style.
Property: background_fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is '#ffffff'</docstring>
      <defaults>['#ffffff']</defaults>
      <alternateSpec arg="background_fill_color" name="background_fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="below" name="below" port_type="basic:List">
      <docstring>A list of renderers to occupy the area below of the plot.
Property: below:List(Instance(Renderer))
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="border_fill_alpha" name="border_fill_alpha(float)" port_type="basic:Float">
      <docstring>The fill alpha for the plot border style.
Property: border_fill_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="border_fill_alpha" name="border_fill_alpha(str)" />
      <alternateSpec arg="border_fill_alpha" name="border_fill_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="border_fill_alpha" name="border_fill_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="border_fill_color" name="border_fill_color(str)">
      <docstring>The fill color for the plot border style.
Property: border_fill_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is '#ffffff'</docstring>
      <defaults>['#ffffff']</defaults>
      <alternateSpec arg="border_fill_color" name="border_fill_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="disabled" name="disabled" port_type="basic:Boolean">
      <docstring>Whether the widget will be disabled when rendered. If ``True``,
    the widget will be greyed-out, and not respond to UI events.
Property: disabled:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="extra_x_ranges" name="extra_x_ranges" port_type="basic:Dictionary">
      <docstring>Additional named ranges to make available for mapping x-coordinates.

    This is useful for adding additional axes.
Property: extra_x_ranges:Dict(String, Instance(Range1d))
default is {}</docstring>
    </inputPortSpec>
    <inputPortSpec arg="extra_y_ranges" name="extra_y_ranges" port_type="basic:Dictionary">
      <docstring>Additional named ranges to make available for mapping y-coordinates.

    This is useful for adding additional axes.
Property: extra_y_ranges:Dict(String, Instance(Range))
default is {}</docstring>
    </inputPortSpec>
    <inputPortSpec arg="h_symmetry" name="h_symmetry" port_type="basic:Boolean">
      <docstring>Whether the total horizontal padding on both sides of the plot will
    be made equal (the left or right padding amount, whichever is larger).
Property: h_symmetry:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="left" name="left" port_type="basic:List">
      <docstring>A list of renderers to occupy the area to the left of the plot.
Property: left:List(Instance(Renderer))
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="lod_factor" name="lod_factor" port_type="basic:Integer">
      <docstring>Decimation factor to use when applying level-of-detail decimation.
Property: lod_factor:Int
default is 10</docstring>
      <defaults>[10]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="lod_interval" name="lod_interval" port_type="basic:Integer">
      <docstring>Interval (in ms) during which an interactive tool event will enable
    level-of-detail downsampling.
Property: lod_interval:Int
default is 300</docstring>
      <defaults>[300]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="lod_threshold" name="lod_threshold" port_type="basic:Integer">
      <docstring>A number of data points, above which level-of-detail downsampling may
    be performed by glyph renderers. Set to ``None`` to disable any
    level-of-detail downsampling.
Property: lod_threshold:Int
default is 2000</docstring>
      <defaults>[2000]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="lod_timeout" name="lod_timeout" port_type="basic:Integer">
      <docstring>Timeout (in ms) for checking whether interactive tool events are still
    occurring. Once level-of-detail mode is enabled, a check is made every
    ``lod_timeout`` ms. If no interactive tool events have happened,
    level-of-detail mode is disabled.
Property: lod_timeout:Int
default is 500</docstring>
      <defaults>[500]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="logo" name="logo">
      <docstring>What version of the Bokeh logo to display on the toolbar. If
    set to None, no logo will be displayed.
Property: logo:Enum('normal', 'grey')
default is 'normal'</docstring>
      <defaults>['normal']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="min_border" name="min_border" port_type="basic:Integer">
      <docstring>A convenience property to set all all the ``min_X_border`` properties
    to the same value. If an individual border property is explicitly set,
    it will override ``min_border``.
Property: min_border:Int
default is 40</docstring>
      <defaults>[40]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="min_border_bottom" name="min_border_bottom" port_type="basic:Integer">
      <docstring>Minimum size in pixels of the padding region below the bottom of
    the central plot region.

    .. note::
        This is a *minimum*. The padding region may expand as needed to
        accommodate titles or axes, etc.
Property: min_border_bottom:Int
default is 50</docstring>
      <defaults>[50]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="min_border_left" name="min_border_left" port_type="basic:Integer">
      <docstring>Minimum size in pixels of the padding region to the left of
    the central plot region.

    .. note::
        This is a *minimum*. The padding region may expand as needed to
        accommodate titles or axes, etc.
Property: min_border_left:Int
default is 50</docstring>
      <defaults>[50]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="min_border_right" name="min_border_right" port_type="basic:Integer">
      <docstring>Minimum size in pixels of the padding region to the right of
    the central plot region.

    .. note::
        This is a *minimum*. The padding region may expand as needed to
        accommodate titles or axes, etc.
Property: min_border_right:Int
default is 50</docstring>
      <defaults>[50]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="min_border_top" name="min_border_top" port_type="basic:Integer">
      <docstring>Minimum size in pixels of the padding region above the top of the
    central plot region.

    .. note::
        This is a *minimum*. The padding region may expand as needed to
        accommodate titles or axes, etc.
Property: min_border_top:Int
default is 50</docstring>
      <defaults>[50]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="outline_line_alpha" name="outline_line_alpha(float)" port_type="basic:Float">
      <docstring>The line alpha for the plot border outline.
Property: outline_line_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="outline_line_alpha" name="outline_line_alpha(str)" />
      <alternateSpec arg="outline_line_alpha" name="outline_line_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="outline_line_alpha" name="outline_line_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="outline_line_cap" name="outline_line_cap">
      <docstring>The line cap for the plot border outline.
Property: outline_line_cap:Enum('butt', 'round', 'square')
default is 'butt'</docstring>
      <defaults>['butt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="outline_line_color" name="outline_line_color(str)">
      <docstring>The line color for the plot border outline.
Property: outline_line_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is '#aaaaaa'</docstring>
      <defaults>['#aaaaaa']</defaults>
      <alternateSpec arg="outline_line_color" name="outline_line_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="outline_line_dash" name="outline_line_dash(str)">
      <docstring>The line dash for the plot border outline.
Property: outline_line_dash:DashPattern
default is []</docstring>
      <alternateSpec arg="outline_line_dash" name="outline_line_dash(int)" port_type="basic:Integer" />
    </inputPortSpec>
    <inputPortSpec arg="outline_line_dash_offset" name="outline_line_dash_offset" port_type="basic:Integer">
      <docstring>The line dash offset for the plot border outline.
Property: outline_line_dash_offset:Int
default is 0</docstring>
      <defaults>[0]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="outline_line_join" name="outline_line_join">
      <docstring>The line join for the plot border outline.
Property: outline_line_join:Enum('miter', 'round', 'bevel')
default is 'miter'</docstring>
      <defaults>['miter']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="outline_line_width" name="outline_line_width(str)">
      <docstring>The line width for the plot border outline.
Property: outline_line_width:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1</docstring>
      <alternateSpec arg="outline_line_width" name="outline_line_width(float)" port_type="basic:Float" />
      <alternateSpec arg="outline_line_width" name="outline_line_width(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="outline_line_width" name="outline_line_width(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="plot_height" name="plot_height" port_type="basic:Integer">
      <docstring>Total height of the entire plot (including any axes, titles,
    border padding, etc.)

    .. note::
        This corresponds directly to the height of the HTML
        canvas that will be used.
Property: plot_height:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="plot_width" name="plot_width" port_type="basic:Integer">
      <docstring>Total width of the entire plot (including any axes, titles,
    border padding, etc.)

    .. note::
        This corresponds directly to the width of the HTML
        canvas that will be used.
Property: plot_width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="renderers" name="renderers" port_type="basic:List">
      <docstring>A list of all renderers for this plot, including guides and annotations
    in addition to glyphs and markers.

    This property can be manipulated by hand, but the ``add_glyph`` and
    ``add_layout`` methods are recommended to help make sure all necessary
    setup is performed.
Property: renderers:List(Instance(Renderer))
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the plot will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height`` will
    act only to set the initial aspect ratio.
    .. warning::

       The responsive setting is known not to work with HBox layout and may not work
       in combination with other widgets or layouts.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="right" name="right" port_type="basic:List">
      <docstring>A list of renderers to occupy the area to the right of the plot.
Property: right:List(Instance(Renderer))
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the plot.
Property: title:String
default is ''</docstring>
      <defaults>['']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title_text_align" name="title_text_align">
      <docstring>The text align for the plot title.
Property: title_text_align:Enum('left', 'right', 'center')
default is 'center'</docstring>
      <defaults>['center']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title_text_alpha" name="title_text_alpha(float)" port_type="basic:Float">
      <docstring>The text alpha for the plot title.
Property: title_text_alpha:NumberSpec(String, Dict(String, Either(String, Float)), Float)
default is 1.0</docstring>
      <defaults>[1.0]</defaults>
      <alternateSpec arg="title_text_alpha" name="title_text_alpha(str)" />
      <alternateSpec arg="title_text_alpha" name="title_text_alpha(dict)" port_type="basic:Dictionary" />
      <alternateSpec arg="title_text_alpha" name="title_text_alpha(list)" port_type="basic:List" />
    </inputPortSpec>
    <inputPortSpec arg="title_text_baseline" name="title_text_baseline">
      <docstring>The text baseline for the plot title.
Property: title_text_baseline:Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging')
default is 'alphabetic'</docstring>
      <defaults>['alphabetic']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title_text_color" name="title_text_color(str)">
      <docstring>The text color for the plot title.
Property: title_text_color:ColorSpec(String, Dict(String, Either(String, Color)), Color)
default is '#444444'</docstring>
      <defaults>['#444444']</defaults>
      <alternateSpec arg="title_text_color" name="title_text_color" port_type="basic:Color" />
    </inputPortSpec>
    <inputPortSpec arg="title_text_font" name="title_text_font">
      <docstring>The text font for the plot title.
Property: title_text_font:String
default is 'helvetica'</docstring>
      <defaults>['helvetica']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size(str)">
      <docstring>The text font size for the plot title.
Property: title_text_font_size:FontSizeSpec(String, Dict(String, Either(String, List(String))), List(String))
default is {'value': '20pt'}</docstring>
      <defaults>["{'value':"]</defaults>
      <alternateSpec arg="title_text_font_size" depth="1" name="title_text_font_size(list)" />
      <alternateSpec arg="title_text_font_size" name="title_text_font_size(dict)" port_type="basic:Dictionary" />
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_style" name="title_text_font_style">
      <docstring>The text font style for the plot title.
Property: title_text_font_style:Enum('normal', 'italic', 'bold')
default is 'normal'</docstring>
      <defaults>['normal']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tool_events" name="tool_events" port_type="basic:Variant">
      <docstring>A ToolEvents object to share and report tool events.
Property: tool_events:Instance(ToolEvents)</docstring>
    </inputPortSpec>
    <inputPortSpec arg="toolbar_location" name="toolbar_location">
      <docstring>Where the toolbar will be located. If set to None, no toolbar
    will be attached to the plot.
Property: toolbar_location:Enum('above', 'below', 'left', 'right')
default is 'above'</docstring>
      <defaults>['above']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools" port_type="basic:List">
      <docstring>A list of tools to add to the plot.
Property: tools:List(Instance(Tool))
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="v_symmetry" name="v_symmetry" port_type="basic:Boolean">
      <docstring>Whether the total vertical padding on both sides of the plot will
    be made equal (the top or bottom padding amount, whichever is larger).
Property: v_symmetry:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="webgl" name="webgl" port_type="basic:Boolean">
      <docstring>Whether WebGL is enabled for this plot. If True, the glyphs that
    support this will render via WebGL instead of the 2D canvas.
Property: webgl:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x_mapper_type" name="x_mapper_type">
      <docstring>What kind of mapper to use to convert x-coordinates in data space
    into x-coordinates in screen space.

    Typically this can be determined automatically, but this property
    can be useful to, e.g., show datetime values as floating point
    "seconds since epoch" instead of formatted dates.
Property: x_mapper_type:Either(Auto, String)
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x_range" name="x_range" port_type="basic:Variant">
      <docstring>The (default) data range of the horizontal dimension of the plot.
Property: x_range:Instance(Range)</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y_mapper_type" name="y_mapper_type">
      <docstring>What kind of mapper to use to convert y-coordinates in data space
    into y-coordinates in screen space.

    Typically this can be determined automatically, but this property
    can be useful to, e.g., show datetime values as floating point
    "seconds since epoch" instead of formatted dates
Property: y_mapper_type:Either(Auto, String)
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="y_range" name="y_range" port_type="basic:Variant">
      <docstring>The (default) data range of the vertical dimension of the plot.
Property: y_range:Instance(Range)</docstring>
    </inputPortSpec>
    <outputPortSpec arg="value" name="value" port_type="plotting|Figure" show_port="True" sort_key="0" />
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Area" module_name="Area" namespace="'charts'">
    <docstring>Create a scatter chart using :class:`ScatterBuilder &lt;bokeh.charts.builders.scatter_builder.ScatterBuilder&gt;`
to render the geometry from values.

Args:
    data (:ref:`userguide_charts_data_types`): table-like data
    x (str or list(str), optional): the column label to use for the x dimension
    y (str or list(str), optional): the column label to use for the y dimension

In addition the the parameters specific to this chart,
:ref:`userguide_charts_defaults` are also accepted as keyword parameters.

Returns:
    :class:`Chart`: includes glyph renderers that generate the scatter points

Examples:

.. bokeh-plot::
    :source-position: above

    from bokeh.sampledata.autompg import autompg as df
    from bokeh.charts import Scatter, output_file, show

    scatter = Scatter(df, x='mpg', y='hp', color='cyl', marker='origin',
                      title="Auto MPG", xlabel="Miles Per Gallon",
                      ylabel="Horsepower")

    output_file('scatter.html')
    show(scatter)</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)" show_port="True">
      <docstring>the column label to use for the x dimension</docstring>
      <alternateSpec arg="x" depth="1" name="x(list)" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)" show_port="True">
      <docstring>the column label to use for the y dimension
</docstring>
      <alternateSpec arg="y" depth="1" name="y(list)" />
    </inputPortSpec>
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate the scatter points
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Bar" module_name="Bar" namespace="'charts'">
    <docstring>Create a Bar chart using :class:`BarBuilder &lt;bokeh.charts.builders.bar_builder.BarBuilder&gt;`
render the geometry from values, cat and stacked.

Args:
    data (:ref:`userguide_charts_data_types`): the data
        source for the chart.
    values (str, optional): iterable 2d representing the data series
        values matrix.
    label (list(str) or str, optional): list of string representing the categories.
        (Defaults to None)
    stack (list(str) or str, optional): columns to use for stacking.
        (Defaults to False, so grouping is assumed)
    group (list(str) or str, optional): columns to use for grouping.
    agg (str): how to aggregate the `values`. (Defaults to 'sum', or only label is
        provided, then performs a `count`)
    continuous_range(Range1d, optional): Custom continuous_range to be
        used. (Defaults to None)

In addition to the parameters specific to this chart,
:ref:`userguide_charts_defaults` are also accepted as keyword parameters.

Returns:
    :class:`Chart`: includes glyph renderers that generate bars

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.charts import Bar, output_file, show, hplot

        # best support is with data in a format that is table-like
        data = {
            'sample': ['1st', '2nd', '1st', '2nd', '1st', '2nd'],
            'interpreter': ['python', 'python', 'pypy', 'pypy', 'jython', 'jython'],
            'timing': [-2, 5, 12, 40, 22, 30]
        }

        # x-axis labels pulled from the interpreter column, stacking labels from sample column
        bar = Bar(data, values='timing', label='interpreter', stack='sample', agg='mean',
                  title="Python Interpreter Sampling", legend='top_right', width=400)

        # table-like data results in reconfiguration of the chart with no data manipulation
        bar2 = Bar(data, values='timing', label=['interpreter', 'sample'],
                   agg='mean', title="Python Interpreters", width=400)

        output_file("stacked_bar.html")
        show(hplot(bar, bar2))</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['categorical']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['linear']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="values" name="values">
      <docstring>iterable 2d representing the data series
values matrix.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="label" depth="1" name="label" show_port="True">
      <docstring>list of string representing the categories.
(Defaults to None)</docstring>
    </inputPortSpec>
    <inputPortSpec arg="stack" depth="1" name="stack" show_port="True">
      <docstring>columns to use for stacking.
(Defaults to False, so grouping is assumed)</docstring>
    </inputPortSpec>
    <inputPortSpec arg="group" depth="1" name="group" show_port="True">
      <docstring>columns to use for grouping.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="agg" name="agg">
      <docstring>how to aggregate the `values`. (Defaults to 'sum', or only label is
provided, then performs a `count`)</docstring>
      <defaults>['sum']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="continuous_range" name="continuous_range" port_type="basic:Variant">
      <docstring>Custom continuous_range to be
used. (Defaults to None)
</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate bars
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.BoxPlot" module_name="BoxPlot" namespace="'charts'">
    <docstring>Create a BoxPlot chart containing one or more boxes from table-like data.

Create a boxplot chart using :class:`BoxPlotBuilder
&lt;bokeh.charts.builders.boxplot_builder.BoxPlotBuilder&gt;` to
render the glyphs from input data and specification. This primary
use case for the boxplot is to depict the distribution of a
variable by providing summary statistics for it. This boxplot is particularly
useful at comparing distributions between categorical variables.

This chart implements functionality for segmenting and comparing the values of a
variable by an associated categorical variable.

Args:
  data (:ref:`userguide_charts_data_types`): the data source for the chart
  values (str, optional): the values to use for producing the boxplot using
    table-like input data
  label (str or list(str), optional): the categorical variable to use for creating
    separate boxes
  color (str or list(str) or bokeh.charts._attributes.ColorAttr, optional): the
    categorical variable or color attribute specification to use for coloring the
    boxes.
  whisker_color (str or list(str) or bokeh.charts._attributes.ColorAttr, optional): the
    color of the "whiskers" that show the spread of values outside the .25 and .75
    quartiles.
  marker (str or list(str) or bokeh.charts._attributes.MarkerAttr, optional): the
    marker glyph to use for the outliers
  outliers (bool, optional): whether to show outliers. Defaults to True.
  **kw:

Returns:
    :class:`Chart`: includes glyph renderers that generate Boxes and Whiskers

Examples:

.. bokeh-plot::
    :source-position: above

    from bokeh.sampledata.autompg import autompg as df
    from bokeh.charts import BoxPlot, output_file, show, hplot

    box = BoxPlot(df, values='mpg', label='cyl', title="Auto MPG Box Plot", width=400)
    box2 = BoxPlot(df, values='mpg', label='cyl', color='cyl',
                      title="MPG Box Plot by Cylinder Count", width=400)

    output_file('box.html')
    show(hplot(box, box2))</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['categorical']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['linear']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="values" name="values">
      <docstring>the values to use for producing the boxplot using
table-like input data</docstring>
    </inputPortSpec>
    <inputPortSpec arg="label" name="label(str)" show_port="True">
      <docstring>the categorical variable to use for creating
separate boxes</docstring>
      <alternateSpec arg="label" depth="1" name="label(list)" />
    </inputPortSpec>
    <inputPortSpec arg="color" name="color(str)" show_port="True">
      <docstring>the
categorical variable or color attribute specification to use for coloring the
boxes.</docstring>
      <alternateSpec arg="color" depth="1" name="color(list)" />
    </inputPortSpec>
    <inputPortSpec arg="whisker_color" name="whisker_color(str)" show_port="True">
      <docstring>the
color of the "whiskers" that show the spread of values outside the .25 and .75
quartiles.</docstring>
      <alternateSpec arg="whisker_color" depth="1" name="whisker_color(list)" />
    </inputPortSpec>
    <inputPortSpec arg="marker" name="marker(str)" show_port="True">
      <docstring>the
marker glyph to use for the outliers</docstring>
      <alternateSpec arg="marker" depth="1" name="marker(list)" />
    </inputPortSpec>
    <inputPortSpec arg="outliers" name="outliers" port_type="basic:Boolean">
      <docstring>whether to show outliers. Defaults to True.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="group" name="group" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="continuous_range" name="continuous_range" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate Boxes and Whiskers
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Donut" module_name="Donut" namespace="'charts'">
    <docstring>Create a Donut chart containing one or more layers from table-like data.

Create a donut chart using :class:`DonutBuilder
&lt;bokeh.charts.builders.donut_builder.DonutBuilder&gt;` to
render the glyphs from input data and specification. The primary
use case for the donut chart is to show relative amount each category, within a
categorical array or multiple categorical arrays, makes up of the whole for some
array of values.

Args:
  data (:ref:`userguide_charts_data_types`): the data source for the chart
  values (str, optional): the values to use for producing the boxplot using
    table-like input data
  label (str or list(str), optional): the categorical variable to use for creating
    separate boxes
  color (str or list(str) or bokeh.charts._attributes.ColorAttr, optional): the
    categorical variable or color attribute specification to use for coloring the
    boxes.
  **kw:

Returns:
    :class:`Chart`: includes glyph renderers that generate Boxes and Whiskers

Examples:

.. bokeh-plot::
    :source-position: above

    from bokeh.sampledata.autompg import autompg as df
    from bokeh.charts import BoxPlot, output_file, show, hplot

    box = BoxPlot(df, values='mpg', label='cyl', title="Auto MPG Box Plot", width=400)
    box2 = BoxPlot(df, values='mpg', label='cyl', color='cyl',
                      title="MPG Box Plot by Cylinder Count", width=400)

    output_file('box.html')
    show(hplot(box, box2))</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="values" name="values">
      <docstring>the values to use for producing the boxplot using
table-like input data</docstring>
    </inputPortSpec>
    <inputPortSpec arg="label" name="label(str)">
      <docstring>the categorical variable to use for creating
separate boxes</docstring>
      <defaults>['index']</defaults>
      <alternateSpec arg="label" depth="1" name="label(list)" />
    </inputPortSpec>
    <inputPortSpec arg="color" name="color(str)" show_port="True">
      <docstring>the
categorical variable or color attribute specification to use for coloring the
boxes.</docstring>
      <alternateSpec arg="color" depth="1" name="color(list)" />
    </inputPortSpec>
    <inputPortSpec arg="hover_tool" name="hover_tool" port_type="basic:Boolean">
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="agg" name="agg" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="hover_text" name="hover_text" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate Boxes and Whiskers
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Dot" module_name="Dot" namespace="'charts'">
    <docstring>Create a Bar chart using :class:`BarBuilder &lt;bokeh.charts.builders.bar_builder.BarBuilder&gt;`
render the geometry from values, cat and stacked.

Args:
    data (:ref:`userguide_charts_data_types`): the data
        source for the chart.
    values (str, optional): iterable 2d representing the data series
        values matrix.
    label (list(str) or str, optional): list of string representing the categories.
        (Defaults to None)
    stack (list(str) or str, optional): columns to use for stacking.
        (Defaults to False, so grouping is assumed)
    group (list(str) or str, optional): columns to use for grouping.
    agg (str): how to aggregate the `values`. (Defaults to 'sum', or only label is
        provided, then performs a `count`)
    continuous_range(Range1d, optional): Custom continuous_range to be
        used. (Defaults to None)

In addition to the parameters specific to this chart,
:ref:`userguide_charts_defaults` are also accepted as keyword parameters.

Returns:
    :class:`Chart`: includes glyph renderers that generate bars

Examples:

    .. bokeh-plot::
        :source-position: above

        from bokeh.charts import Bar, output_file, show, hplot

        # best support is with data in a format that is table-like
        data = {
            'sample': ['1st', '2nd', '1st', '2nd', '1st', '2nd'],
            'interpreter': ['python', 'python', 'pypy', 'pypy', 'jython', 'jython'],
            'timing': [-2, 5, 12, 40, 22, 30]
        }

        # x-axis labels pulled from the interpreter column, stacking labels from sample column
        bar = Dot(data, values='timing', label='interpreter', stack='sample', agg='mean',
                  title="Python Interpreter Sampling", legend='top_right', width=400)

        # table-like data results in reconfiguration of the chart with no data manipulation
        bar2 = Dot(data, values='timing', label=['interpreter', 'sample'],
                   agg='mean', title="Python Interpreters", width=400)

        output_file("Dot.html")
        show(hplot(bar, bar2))</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['categorical']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['linear']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="values" name="values">
      <docstring>iterable 2d representing the data series
values matrix.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="label" depth="1" name="label" show_port="True">
      <docstring>list of string representing the categories.
(Defaults to None)</docstring>
    </inputPortSpec>
    <inputPortSpec arg="stack" depth="1" name="stack" show_port="True">
      <docstring>columns to use for stacking.
(Defaults to False, so grouping is assumed)</docstring>
    </inputPortSpec>
    <inputPortSpec arg="group" depth="1" name="group" show_port="True">
      <docstring>columns to use for grouping.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="agg" name="agg">
      <docstring>how to aggregate the `values`. (Defaults to 'sum', or only label is
provided, then performs a `count`)</docstring>
      <defaults>['sum']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="continuous_range" name="continuous_range" port_type="basic:Variant">
      <docstring>Custom continuous_range to be
used. (Defaults to None)
</docstring>
    </inputPortSpec>
    <inputPortSpec arg="color" name="color" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate bars
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.HeatMap" module_name="HeatMap" namespace="'charts'">
    <docstring>Represent 3 dimensions in a HeatMap chart using x, y, and values.

Uses the :class:`~bokeh.charts.builders.heatmap_builder.HeatMapBuilder`
to render the geometry from values.

A HeatMap is a 3 Dimensional chart that crosses two dimensions, then aggregates
values  that correspond to the intersection of the horizontal and vertical
dimensions. The value that falls at the intersection is then mapped to a
color in a palette by default. All values that map to the positions on the chart are
binned by the number of discrete colors in the palette.

Args:
    data (:ref:`userguide_charts_data_types`): the data source for the chart
    values (str, optional): the values to use for producing the histogram using
        table-like input data
    stat (str, optional): the aggregation to use. Defaults to count. If provided
        `None`, then no aggregation will be attempted. This is useful for cases
        when the values have already been aggregated.
    hover_tool (bool, optional): whether to show the hover tool. Defaults to `True`
    hover_text (str, optional): a string to place beside the value in the hover
        tooltip. Defaults to `None`. When `None`, a hover_text will be derived from
        the aggregation and the values column.

Returns:
    a new :class:`Chart &lt;bokeh.charts.Chart&gt;`

Examples:

.. bokeh-plot::
    :source-position: above

    from bokeh.charts import HeatMap, output_file, show

    # (dict, OrderedDict, lists, arrays and DataFrames are valid inputs)
    data = {'fruit': ['apples']*3 + ['bananas']*3 + ['pears']*3,
            'fruit_count': [4, 5, 8, 1, 2, 4, 6, 5, 4],
            'sample': [1, 2, 3]*3}

    hm = HeatMap(data, x='fruit', y='sample', values='fruit_count',
                 title='Fruits', stat=None)

    output_file('heatmap.html')
    show(hm)</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="values" name="values">
      <docstring>the values to use for producing the histogram using
table-like input data</docstring>
    </inputPortSpec>
    <inputPortSpec arg="stat" name="stat">
      <docstring>the aggregation to use. Defaults to count. If provided
`None`, then no aggregation will be attempted. This is useful for cases
when the values have already been aggregated.</docstring>
      <defaults>['count']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="hover_tool" name="hover_tool" port_type="basic:Boolean">
      <docstring>whether to show the hover tool. Defaults to `True`</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="hover_text" name="hover_text">
      <docstring>a string to place beside the value in the hover
tooltip. Defaults to `None`. When `None`, a hover_text will be derived from
the aggregation and the values column.
</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y" name="y" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="x" name="x" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Histogram" module_name="Histogram" namespace="'charts'">
    <docstring>Create a histogram chart with one or more histograms.

Create a histogram chart using :class:`HistogramBuilder
&lt;bokeh.charts.builders.histogram_builder.HistogramBuilder&gt;` to
render the glyphs from input data and specification. This primary
use case for the histogram is to depict the distribution of a
variable by binning and aggregating the values in each bin.

This chart implements functionality to provide convenience in optimal
selection of bin count, but also for segmenting and comparing segments of
the variable by a categorical variable.

Args:
  data (:ref:`userguide_charts_data_types`): the data source for the chart
  values (str, optional): the values to use for producing the histogram using
    table-like input data
  label (str or list(str), optional): the categorical variable to use for creating
    separate histograms
  color (str or list(str) or bokeh.charts._attributes.ColorAttr, optional): the
    categorical variable or color attribute specification to use for coloring the
    histogram.
  agg (str, optional): how to aggregate the bins. Defaults to "count".
  bins (int, optional): the number of bins to use. Defaults to None to auto select.
  **kw:

Returns:
    :class:`Chart`: includes glyph renderers that generate the histograms

Examples:

.. bokeh-plot::
    :source-position: above

    from bokeh.sampledata.autompg import autompg as df
    from bokeh.charts import Histogram, output_file, show, hplot

    hist = Histogram(df, values='mpg', title="Auto MPG Histogram", width=400)
    hist2 = Histogram(df, values='mpg', label='cyl', color='cyl', legend='top_right',
                      title="MPG Histogram by Cylinder Count", width=400)

    output_file('hist.html')
    show(hplot(hist, hist2))</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['linear']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="values" name="values">
      <docstring>the values to use for producing the histogram using
table-like input data</docstring>
    </inputPortSpec>
    <inputPortSpec arg="label" name="label(str)" show_port="True">
      <docstring>the categorical variable to use for creating
separate histograms</docstring>
      <alternateSpec arg="label" depth="1" name="label(list)" />
    </inputPortSpec>
    <inputPortSpec arg="color" name="color(str)" show_port="True">
      <docstring>the
categorical variable or color attribute specification to use for coloring the
histogram.</docstring>
      <alternateSpec arg="color" depth="1" name="color(list)" />
    </inputPortSpec>
    <inputPortSpec arg="agg" name="agg">
      <docstring>how to aggregate the bins. Defaults to "count".</docstring>
      <defaults>['count']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="bins" name="bins" port_type="basic:Integer">
      <docstring>the number of bins to use. Defaults to None to auto select.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="continuous_range" name="continuous_range" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate the histograms
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Horizon" module_name="Horizon" namespace="'charts'">
    <docstring>Create a scatter chart using :class:`ScatterBuilder &lt;bokeh.charts.builders.scatter_builder.ScatterBuilder&gt;`
to render the geometry from values.

Args:
    data (:ref:`userguide_charts_data_types`): table-like data
    x (str or list(str), optional): the column label to use for the x dimension
    y (str or list(str), optional): the column label to use for the y dimension

In addition the the parameters specific to this chart,
:ref:`userguide_charts_defaults` are also accepted as keyword parameters.

Returns:
    :class:`Chart`: includes glyph renderers that generate the scatter points

Examples:

.. bokeh-plot::
    :source-position: above

    from bokeh.sampledata.autompg import autompg as df
    from bokeh.charts import Scatter, output_file, show

    scatter = Scatter(df, x='mpg', y='hp', color='cyl', marker='origin',
                      title="Auto MPG", xlabel="Miles Per Gallon",
                      ylabel="Horsepower")

    output_file('scatter.html')
    show(scatter)</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)" show_port="True">
      <docstring>the column label to use for the x dimension</docstring>
      <alternateSpec arg="x" depth="1" name="x(list)" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)" show_port="True">
      <docstring>the column label to use for the y dimension
</docstring>
      <alternateSpec arg="y" depth="1" name="y(list)" />
    </inputPortSpec>
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="series" name="series" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate the scatter points
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Line" module_name="Line" namespace="'charts'">
    <docstring>Create a line chart using :class:`LineBuilder &lt;bokeh.charts.builders.line_builder.LineBuilder&gt;` to
render the glyphs.

The line chart is typically is used with column oriented data, where each column
contains comparable measurements and the column names are treated as a categorical
variable for differentiating the measurement values. One of the columns can be used as
an index for either the x or y axis.

.. note::
    Only the x or y axis can display multiple variables, while the other is used
    as an index.

Args:
    data (list(list), numpy.ndarray, pandas.DataFrame, list(pd.Series)): a 2d data
        source with columns of data for each line.
    x (str or list(str), optional): specifies variable(s) to use for x axis
    y (str or list(str), optional): specifies variable(s) to use for y axis

In addition the the parameters specific to this chart,
:ref:`userguide_charts_defaults` are also accepted as keyword parameters.

.. note::
    This chart type differs on input types as compared to other charts,
    due to the way that line charts typically are plotting labeled series. For
    example, a column for AAPL stock prices over time. Another way this could be
    plotted is to have a DataFrame with a column of `stock_label` and columns of
    `price`, which is the stacked format. Both should be supported, but the former
    is the expected one. Internally, the latter format is being derived.

Returns:
    :class:`Chart`: includes glyph renderers that generate the lines

Examples:

.. bokeh-plot::
    :source-position: above

    import numpy as np
    from bokeh.charts import Line, output_file, show

    # (dict, OrderedDict, lists, arrays and DataFrames are valid inputs)
    xyvalues = np.array([[2, 3, 7, 5, 26], [12, 33, 47, 15, 126], [22, 43, 10, 25, 26]])

    line = Line(xyvalues, title="line", legend="top_left", ylabel='Languages')

    output_file('line.html')
    show(line)</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="data" name="data" port_type="basic:List" show_port="True">
      <docstring>a 2d data
source with columns of data for each line.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)" show_port="True">
      <docstring>specifies variable(s) to use for x axis</docstring>
      <alternateSpec arg="x" depth="1" name="x(list)" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)" show_port="True">
      <docstring>specifies variable(s) to use for y axis
</docstring>
      <alternateSpec arg="y" depth="1" name="y(list)" />
    </inputPortSpec>
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate the lines
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Scatter" module_name="Scatter" namespace="'charts'">
    <docstring>Create a scatter chart using :class:`ScatterBuilder &lt;bokeh.charts.builders.scatter_builder.ScatterBuilder&gt;`
to render the geometry from values.

Args:
    data (:ref:`userguide_charts_data_types`): table-like data
    x (str or list(str), optional): the column label to use for the x dimension
    y (str or list(str), optional): the column label to use for the y dimension

In addition the the parameters specific to this chart,
:ref:`userguide_charts_defaults` are also accepted as keyword parameters.

Returns:
    :class:`Chart`: includes glyph renderers that generate the scatter points

Examples:

.. bokeh-plot::
    :source-position: above

    from bokeh.sampledata.autompg import autompg as df
    from bokeh.charts import Scatter, output_file, show

    scatter = Scatter(df, x='mpg', y='hp', color='cyl', marker='origin',
                      title="Auto MPG", xlabel="Miles Per Gallon",
                      ylabel="Horsepower")

    output_file('scatter.html')
    show(scatter)</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="x" name="x(str)" show_port="True">
      <docstring>the column label to use for the x dimension</docstring>
      <alternateSpec arg="x" depth="1" name="x(list)" />
    </inputPortSpec>
    <inputPortSpec arg="y" name="y(str)" show_port="True">
      <docstring>the column label to use for the y dimension
</docstring>
      <alternateSpec arg="y" depth="1" name="y(list)" />
    </inputPortSpec>
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" sort_key="0">
      <docstring>class:`Chart`: includes glyph renderers that generate the scatter points
</docstring>
    </outputPortSpec>
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.Step" module_name="Step" namespace="'charts'">
    <docstring>Create a line chart using :class:`LineBuilder &lt;bokeh.charts.builder.line_builder.LineBuilder&gt;` to
render the geometry from values and index.

Args:
    values (iterable): iterable 2d representing the data series
        values matrix.
    index (str|1d iterable, optional): can be used to specify a common custom
        index for all data series as an **1d iterable** of any sort that will be used as
        series common index or a **string** that corresponds to the key of the
        mapping to be used as index (and not as data series) if
        area.values is a mapping (like a dict, an OrderedDict
        or a pandas DataFrame)

In addition the the parameters specific to this chart,
:ref:`userguide_charts_generic_arguments` are also accepted as keyword parameters.

Returns:
    a new :class:`Chart &lt;bokeh.charts.Chart&gt;`

Examples:

.. bokeh-plot::
    :source-position: above

    import numpy as np
    from bokeh.charts import Line, output_file, show

    # (dict, OrderedDict, lists, arrays and DataFrames are valid inputs)
    xyvalues = np.array([[2, 3, 7, 5, 26], [12, 33, 47, 15, 126], [22, 43, 10, 25, 26]])

    line = Line(xyvalues, title="line", legend="top_left", ylabel='Languages')

    output_file('line.html')
    show(line)</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="values" name="values" port_type="basic:Variant" show_port="True">
      <docstring>iterable 2d representing the data series
values matrix.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="index" name="index">
      <docstring>can be used to specify a common custom
index for all data series as an **1d iterable** of any sort that will be used as
series common index or a **string** that corresponds to the key of the
mapping to be used as index (and not as data series) if
area.values is a mapping (like a dict, an OrderedDict
or a pandas DataFrame)
</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y" name="y" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="x" name="x" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" />
  </moduleSpec>
  <moduleSpec code_ref="bokeh.charts.TimeSeries" module_name="TimeSeries" namespace="'charts'">
    <docstring>Create a line chart using :class:`TimeSeriesBuilder &lt;bokeh.charts.builder.line_builder.LineBuilder&gt;` to
render the geometry from values and index.

Args:
    values (iterable): iterable 2d representing the data series
        values matrix.
    index (str|1d iterable, optional): can be used to specify a common custom
        index for all data series as an **1d iterable** of any sort that will be used as
        series common index or a **string** that corresponds to the key of the
        mapping to be used as index (and not as data series) if
        area.values is a mapping (like a dict, an OrderedDict
        or a pandas DataFrame)

In addition the the parameters specific to this chart,
:ref:`userguide_charts_generic_arguments` are also accepted as keyword parameters.

Returns:
    a new :class:`Chart &lt;bokeh.charts.Chart&gt;`

Examples:

.. bokeh-plot::
    :source-position: above

    import numpy as np
    from bokeh.charts import Line, output_file, show

    # (dict, OrderedDict, lists, arrays and DataFrames are valid inputs)
    xyvalues = np.array([[2, 3, 7, 5, 26], [12, 33, 47, 15, 126], [22, 43, 10, 25, 26]])

    line = Line(xyvalues, title="line", legend="top_left", ylabel='Languages')

    output_file('line.html')
    show(line)</docstring>
    <inputPortSpec arg="filename" name="filename" port_type="basic:File">
      <docstring>A name for the file to save this chart to.
Property: filename:Either(Bool, String)
default is False</docstring>
    </inputPortSpec>
    <inputPortSpec arg="height" name="height" port_type="basic:Integer">
      <docstring>Height of the rendered chart, in pixels.
Property: height:Int
default is 400</docstring>
      <defaults>[400]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="id" name="id">
      <docstring>Id of the chart.
Property: id:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="legend" name="legend(str)">
      <docstring>A location where the legend should draw itself.
Property: legend:Either(Bool, Enum('top_left', 'top_center', 'top_right', 'right_center', 'bottom_right', 'bottom_center', 'bottom_left', 'left_center', 'center'), Tuple(Float, Float))</docstring>
      <alternateSpec arg="legend" depth="1" name="legend(list)" port_type="basic:Float" />
      <alternateSpec arg="legend" name="legend(bool)" port_type="basic:Boolean" />
    </inputPortSpec>
    <inputPortSpec arg="name" name="name">
      <docstring>Property: name:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="notebook" name="notebook(bool)" port_type="basic:Boolean">
      <docstring>Whether to display the plot inline in an IPython/Jupyter
    notebook.
Property: notebook:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="notebook" name="notebook(str)" />
    </inputPortSpec>
    <inputPortSpec arg="responsive" name="responsive" port_type="basic:Boolean">
      <docstring>If True, the chart will automatically resize based on the size of its container. The
    aspect ratio of the plot will be preserved, but ``plot_width`` and ``plot_height``
    will act only to set the initial aspect ratio.
Property: responsive:Bool
default is False</docstring>
      <defaults>[False]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="server" name="server(bool)" port_type="basic:Boolean">
      <docstring>A name to use to save this chart to on server.
Property: server:Either(Bool, String)
default is False</docstring>
      <defaults>[False]</defaults>
      <alternateSpec arg="server" name="server(str)" />
    </inputPortSpec>
    <inputPortSpec arg="tags" name="tags" port_type="basic:List">
      <docstring>Property: tags:List(Any)
default is []</docstring>
      <defaults>[[]]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="title" name="title">
      <docstring>A title for the chart.
Property: title:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="title_text_font_size" name="title_text_font_size">
      <docstring>Font size to use for title label.
Property: title_text_font_size:String
default is '14pt'</docstring>
      <defaults>['14pt']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="tools" name="tools(bool)" port_type="basic:Boolean">
      <docstring>Whether to add default tools the the chart.
Property: tools:Either(Bool, String)
default is True</docstring>
      <defaults>[True]</defaults>
      <alternateSpec arg="tools" name="tools(str)" />
    </inputPortSpec>
    <inputPortSpec arg="width" name="width" port_type="basic:Integer">
      <docstring>Width of the rendered chart, in pixels.
Property: width:Int
default is 600</docstring>
      <defaults>[600]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xgrid" name="xgrid" port_type="basic:Boolean">
      <docstring>Whether to draw an x-grid.
Property: xgrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="xlabel" name="xlabel">
      <docstring>A label for the x-axis. (default: None)
Property: xlabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="xscale" name="xscale">
      <docstring>What kind of scale to use for the x-axis.
Property: xscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ygrid" name="ygrid" port_type="basic:Boolean">
      <docstring>Whether to draw an y-grid.
Property: ygrid:Bool
default is True</docstring>
      <defaults>[True]</defaults>
    </inputPortSpec>
    <inputPortSpec arg="ylabel" name="ylabel">
      <docstring>A label for the y-axis. (default: None)
Property: ylabel:String</docstring>
    </inputPortSpec>
    <inputPortSpec arg="yscale" name="yscale">
      <docstring>What kind of scale to use for the y-axis.
Property: yscale:Either(Auto, Enum('linear', 'categorical', 'datetime'))
default is 'auto'</docstring>
      <defaults>['auto']</defaults>
    </inputPortSpec>
    <inputPortSpec arg="values" name="values" port_type="basic:Variant" show_port="True">
      <docstring>iterable 2d representing the data series
values matrix.</docstring>
    </inputPortSpec>
    <inputPortSpec arg="index" name="index">
      <docstring>can be used to specify a common custom
index for all data series as an **1d iterable** of any sort that will be used as
series common index or a **string** that corresponds to the key of the
mapping to be used as index (and not as data series) if
area.values is a mapping (like a dict, an OrderedDict
or a pandas DataFrame)
</docstring>
    </inputPortSpec>
    <inputPortSpec arg="y" name="y" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="x" name="x" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="data" name="data" port_type="basic:Variant" show_port="True" />
    <inputPortSpec arg="builder_type" name="builder_type" port_type="basic:Variant" show_port="True" />
    <outputPortSpec arg="value" name="value" port_type="basic:Variant" show_port="True" />
  </moduleSpec>
  <translation signature="basic:Color">def input_t(value):
    return '#%02X%02X%02X' % tuple([int(c*255) for c in value.tuple])
def output_t(value):
    from vistrails.core.utils import InstanceObject
    return InstanceObject(tuple=tuple([float(ord(c))/255.0 for c in value.replace('#', '').decode('hex')]))</translation>
  <translation signature="basic:Path">def input_t(value):
    return value.name
def output_t(value):
    from vistrails.core.modules.basic_modules import PathObject
    return PathObject(tuple=value)</translation>
</specs>
